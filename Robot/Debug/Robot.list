
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004448  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ebc  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005410  08005410  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08005410  08005410  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005410  08005410  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  20000064  0800547c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  0800547c  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f7a3  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022cb  00000000  00000000  0002f873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00031b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c86  00000000  00000000  00032b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018524  00000000  00000000  0003378e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a67  00000000  00000000  0004bcb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cce9  00000000  00000000  0005e719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004574  00000000  00000000  000eb404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000ef978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800453c 	.word	0x0800453c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800453c 	.word	0x0800453c

0800014c <map>:
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM3_Init(void);

int map(int value, int fromLow, int fromHigh, int toLow, int toHigh)
		{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
			return (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;
 800015a:	68fa      	ldr	r2, [r7, #12]
 800015c:	68bb      	ldr	r3, [r7, #8]
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	69b9      	ldr	r1, [r7, #24]
 8000162:	683a      	ldr	r2, [r7, #0]
 8000164:	1a8a      	subs	r2, r1, r2
 8000166:	fb03 f202 	mul.w	r2, r3, r2
 800016a:	6879      	ldr	r1, [r7, #4]
 800016c:	68bb      	ldr	r3, [r7, #8]
 800016e:	1acb      	subs	r3, r1, r3
 8000170:	fb92 f2f3 	sdiv	r2, r2, r3
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	4413      	add	r3, r2
		}
 8000178:	4618      	mov	r0, r3
 800017a:	3714      	adds	r7, #20
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
	...

08000184 <handleReceivedData>:

void handleReceivedData(uint8_t* rx_data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b08a      	sub	sp, #40	; 0x28
 8000188:	af02      	add	r7, sp, #8
 800018a:	6078      	str	r0, [r7, #4]
	uint16_t angle = 0;
 800018c:	2300      	movs	r3, #0
 800018e:	833b      	strh	r3, [r7, #24]
	char identifier = rx_data[0];  // Find the identifier position
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	75fb      	strb	r3, [r7, #23]
	size_t terminatorPosition = 0;  // Find the terminator position
 8000196:	2300      	movs	r3, #0
 8000198:	61fb      	str	r3, [r7, #28]
	uint8_t stop = 0;
 800019a:	2300      	movs	r3, #0
 800019c:	76fb      	strb	r3, [r7, #27]
	while (rx_data[terminatorPosition] != 'A' && rx_data[terminatorPosition] != 'B'
 800019e:	e006      	b.n	80001ae <handleReceivedData+0x2a>
	    								&& rx_data[terminatorPosition] != 'C')
	{
	   terminatorPosition++;
 80001a0:	69fb      	ldr	r3, [r7, #28]
 80001a2:	3301      	adds	r3, #1
 80001a4:	61fb      	str	r3, [r7, #28]
	   if (terminatorPosition >= 8)
 80001a6:	69fb      	ldr	r3, [r7, #28]
 80001a8:	2b07      	cmp	r3, #7
 80001aa:	f200 8160 	bhi.w	800046e <handleReceivedData+0x2ea>
	while (rx_data[terminatorPosition] != 'A' && rx_data[terminatorPosition] != 'B'
 80001ae:	687a      	ldr	r2, [r7, #4]
 80001b0:	69fb      	ldr	r3, [r7, #28]
 80001b2:	4413      	add	r3, r2
 80001b4:	781b      	ldrb	r3, [r3, #0]
	    								&& rx_data[terminatorPosition] != 'C')
 80001b6:	2b41      	cmp	r3, #65	; 0x41
 80001b8:	d00b      	beq.n	80001d2 <handleReceivedData+0x4e>
	while (rx_data[terminatorPosition] != 'A' && rx_data[terminatorPosition] != 'B'
 80001ba:	687a      	ldr	r2, [r7, #4]
 80001bc:	69fb      	ldr	r3, [r7, #28]
 80001be:	4413      	add	r3, r2
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b42      	cmp	r3, #66	; 0x42
 80001c4:	d005      	beq.n	80001d2 <handleReceivedData+0x4e>
	    								&& rx_data[terminatorPosition] != 'C')
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	69fb      	ldr	r3, [r7, #28]
 80001ca:	4413      	add	r3, r2
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b43      	cmp	r3, #67	; 0x43
 80001d0:	d1e6      	bne.n	80001a0 <handleReceivedData+0x1c>
	   {
		   return;  // Invalid data format, handle error or ignore data
	   }
	}
	switch(terminatorPosition)
 80001d2:	69fb      	ldr	r3, [r7, #28]
 80001d4:	2b04      	cmp	r3, #4
 80001d6:	d009      	beq.n	80001ec <handleReceivedData+0x68>
 80001d8:	69fb      	ldr	r3, [r7, #28]
 80001da:	2b04      	cmp	r3, #4
 80001dc:	d80f      	bhi.n	80001fe <handleReceivedData+0x7a>
 80001de:	69fb      	ldr	r3, [r7, #28]
 80001e0:	2b02      	cmp	r3, #2
 80001e2:	d009      	beq.n	80001f8 <handleReceivedData+0x74>
 80001e4:	69fb      	ldr	r3, [r7, #28]
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	d003      	beq.n	80001f2 <handleReceivedData+0x6e>
 80001ea:	e008      	b.n	80001fe <handleReceivedData+0x7a>
	{
		case 4: stop = 3; break;
 80001ec:	2303      	movs	r3, #3
 80001ee:	76fb      	strb	r3, [r7, #27]
 80001f0:	e005      	b.n	80001fe <handleReceivedData+0x7a>
		case 3: stop = 2; break;
 80001f2:	2302      	movs	r3, #2
 80001f4:	76fb      	strb	r3, [r7, #27]
 80001f6:	e002      	b.n	80001fe <handleReceivedData+0x7a>
		case 2: stop = 1; break;
 80001f8:	2301      	movs	r3, #1
 80001fa:	76fb      	strb	r3, [r7, #27]
 80001fc:	bf00      	nop
	}
	//char terminator = rx_data[terminatorPosition];

	char anglearray[4];
	char gripnum[2];
	char griptest = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	75bb      	strb	r3, [r7, #22]

	memcpy(anglearray, &rx_data[1], stop);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	1c59      	adds	r1, r3, #1
 8000206:	7efa      	ldrb	r2, [r7, #27]
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4618      	mov	r0, r3
 800020e:	f004 f987 	bl	8004520 <memcpy>
	//memcpy(buffer, &rx_data[1], stop);

	angle = atoi(anglearray);  // Convert ASCII digits to integer
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	4618      	mov	r0, r3
 8000218:	f004 f8c4 	bl	80043a4 <atoi>
 800021c:	4603      	mov	r3, r0
 800021e:	833b      	strh	r3, [r7, #24]
	pwm = map(angle, 0, 180, 250, 1250);
 8000220:	8b38      	ldrh	r0, [r7, #24]
 8000222:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	23fa      	movs	r3, #250	; 0xfa
 800022a:	22b4      	movs	r2, #180	; 0xb4
 800022c:	2100      	movs	r1, #0
 800022e:	f7ff ff8d 	bl	800014c <map>
 8000232:	4603      	mov	r3, r0
 8000234:	4a90      	ldr	r2, [pc, #576]	; (8000478 <handleReceivedData+0x2f4>)
 8000236:	6013      	str	r3, [r2, #0]
	//memcpy(buffer, anglearray, sizeof(anglearray));
	memcpy(buffer, &rx_data[1], stop);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3301      	adds	r3, #1
 800023c:	7efa      	ldrb	r2, [r7, #27]
 800023e:	4619      	mov	r1, r3
 8000240:	488e      	ldr	r0, [pc, #568]	; (800047c <handleReceivedData+0x2f8>)
 8000242:	f004 f96d 	bl	8004520 <memcpy>
//	SSD1306_UpdateScreen();


	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm);

	switch(identifier)
 8000246:	7dfb      	ldrb	r3, [r7, #23]
 8000248:	3b41      	subs	r3, #65	; 0x41
 800024a:	2b0e      	cmp	r3, #14
 800024c:	f200 8110 	bhi.w	8000470 <handleReceivedData+0x2ec>
 8000250:	a201      	add	r2, pc, #4	; (adr r2, 8000258 <handleReceivedData+0xd4>)
 8000252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000256:	bf00      	nop
 8000258:	080003af 	.word	0x080003af
 800025c:	08000471 	.word	0x08000471
 8000260:	08000471 	.word	0x08000471
 8000264:	08000471 	.word	0x08000471
 8000268:	08000471 	.word	0x08000471
 800026c:	08000471 	.word	0x08000471
 8000270:	08000471 	.word	0x08000471
 8000274:	08000471 	.word	0x08000471
 8000278:	08000471 	.word	0x08000471
 800027c:	08000471 	.word	0x08000471
 8000280:	08000471 	.word	0x08000471
 8000284:	08000471 	.word	0x08000471
 8000288:	08000295 	.word	0x08000295
 800028c:	080002f3 	.word	0x080002f3
 8000290:	08000351 	.word	0x08000351
	{
		case 'M':
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
 8000294:	4b78      	ldr	r3, [pc, #480]	; (8000478 <handleReceivedData+0x2f4>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	4b79      	ldr	r3, [pc, #484]	; (8000480 <handleReceivedData+0x2fc>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(3);
 800029e:	2003      	movs	r0, #3
 80002a0:	f000 ffe0 	bl	8001264 <HAL_Delay>
			SSD1306_GotoXY(0,0);
 80002a4:	2100      	movs	r1, #0
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 fc7c 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts("Motor: ", &Font_11x18, SSD1306_COLOR_WHITE);
 80002ac:	2201      	movs	r2, #1
 80002ae:	4975      	ldr	r1, [pc, #468]	; (8000484 <handleReceivedData+0x300>)
 80002b0:	4875      	ldr	r0, [pc, #468]	; (8000488 <handleReceivedData+0x304>)
 80002b2:	f000 fd0d 	bl	8000cd0 <SSD1306_Puts>
			SSD1306_GotoXY (70, 0);
 80002b6:	2100      	movs	r1, #0
 80002b8:	2046      	movs	r0, #70	; 0x46
 80002ba:	f000 fc73 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts("1", &Font_11x18, SSD1306_COLOR_WHITE);
 80002be:	2201      	movs	r2, #1
 80002c0:	4970      	ldr	r1, [pc, #448]	; (8000484 <handleReceivedData+0x300>)
 80002c2:	4872      	ldr	r0, [pc, #456]	; (800048c <handleReceivedData+0x308>)
 80002c4:	f000 fd04 	bl	8000cd0 <SSD1306_Puts>

			SSD1306_GotoXY (0, 25);
 80002c8:	2119      	movs	r1, #25
 80002ca:	2000      	movs	r0, #0
 80002cc:	f000 fc6a 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts("Angle: ", &Font_11x18, SSD1306_COLOR_WHITE);
 80002d0:	2201      	movs	r2, #1
 80002d2:	496c      	ldr	r1, [pc, #432]	; (8000484 <handleReceivedData+0x300>)
 80002d4:	486e      	ldr	r0, [pc, #440]	; (8000490 <handleReceivedData+0x30c>)
 80002d6:	f000 fcfb 	bl	8000cd0 <SSD1306_Puts>
			SSD1306_GotoXY (70, 25);
 80002da:	2119      	movs	r1, #25
 80002dc:	2046      	movs	r0, #70	; 0x46
 80002de:	f000 fc61 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts(&buffer, &Font_11x18, SSD1306_COLOR_WHITE);
 80002e2:	2201      	movs	r2, #1
 80002e4:	4967      	ldr	r1, [pc, #412]	; (8000484 <handleReceivedData+0x300>)
 80002e6:	4865      	ldr	r0, [pc, #404]	; (800047c <handleReceivedData+0x2f8>)
 80002e8:	f000 fcf2 	bl	8000cd0 <SSD1306_Puts>

			SSD1306_UpdateScreen();
 80002ec:	f000 fbb6 	bl	8000a5c <SSD1306_UpdateScreen>
			break;
 80002f0:	e0be      	b.n	8000470 <handleReceivedData+0x2ec>
		case 'N':
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm);
 80002f2:	4b61      	ldr	r3, [pc, #388]	; (8000478 <handleReceivedData+0x2f4>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	4b62      	ldr	r3, [pc, #392]	; (8000480 <handleReceivedData+0x2fc>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(3);
 80002fc:	2003      	movs	r0, #3
 80002fe:	f000 ffb1 	bl	8001264 <HAL_Delay>
			SSD1306_GotoXY(0,0);
 8000302:	2100      	movs	r1, #0
 8000304:	2000      	movs	r0, #0
 8000306:	f000 fc4d 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts("Motor: ", &Font_11x18, SSD1306_COLOR_WHITE);
 800030a:	2201      	movs	r2, #1
 800030c:	495d      	ldr	r1, [pc, #372]	; (8000484 <handleReceivedData+0x300>)
 800030e:	485e      	ldr	r0, [pc, #376]	; (8000488 <handleReceivedData+0x304>)
 8000310:	f000 fcde 	bl	8000cd0 <SSD1306_Puts>
			SSD1306_GotoXY (70, 0);
 8000314:	2100      	movs	r1, #0
 8000316:	2046      	movs	r0, #70	; 0x46
 8000318:	f000 fc44 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts("2", &Font_11x18, SSD1306_COLOR_WHITE);
 800031c:	2201      	movs	r2, #1
 800031e:	4959      	ldr	r1, [pc, #356]	; (8000484 <handleReceivedData+0x300>)
 8000320:	485c      	ldr	r0, [pc, #368]	; (8000494 <handleReceivedData+0x310>)
 8000322:	f000 fcd5 	bl	8000cd0 <SSD1306_Puts>

			SSD1306_GotoXY (0, 25);
 8000326:	2119      	movs	r1, #25
 8000328:	2000      	movs	r0, #0
 800032a:	f000 fc3b 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts("Angle: ", &Font_11x18, SSD1306_COLOR_WHITE);
 800032e:	2201      	movs	r2, #1
 8000330:	4954      	ldr	r1, [pc, #336]	; (8000484 <handleReceivedData+0x300>)
 8000332:	4857      	ldr	r0, [pc, #348]	; (8000490 <handleReceivedData+0x30c>)
 8000334:	f000 fccc 	bl	8000cd0 <SSD1306_Puts>
			SSD1306_GotoXY (70, 25);
 8000338:	2119      	movs	r1, #25
 800033a:	2046      	movs	r0, #70	; 0x46
 800033c:	f000 fc32 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts(&buffer, &Font_11x18, SSD1306_COLOR_WHITE);
 8000340:	2201      	movs	r2, #1
 8000342:	4950      	ldr	r1, [pc, #320]	; (8000484 <handleReceivedData+0x300>)
 8000344:	484d      	ldr	r0, [pc, #308]	; (800047c <handleReceivedData+0x2f8>)
 8000346:	f000 fcc3 	bl	8000cd0 <SSD1306_Puts>

			SSD1306_UpdateScreen();
 800034a:	f000 fb87 	bl	8000a5c <SSD1306_UpdateScreen>
			break;
 800034e:	e08f      	b.n	8000470 <handleReceivedData+0x2ec>
		case 'O':
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwm);
 8000350:	4b49      	ldr	r3, [pc, #292]	; (8000478 <handleReceivedData+0x2f4>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	4b4a      	ldr	r3, [pc, #296]	; (8000480 <handleReceivedData+0x2fc>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(3);
 800035a:	2003      	movs	r0, #3
 800035c:	f000 ff82 	bl	8001264 <HAL_Delay>
			SSD1306_GotoXY(0,0);
 8000360:	2100      	movs	r1, #0
 8000362:	2000      	movs	r0, #0
 8000364:	f000 fc1e 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts("Motor: ", &Font_11x18, SSD1306_COLOR_WHITE);
 8000368:	2201      	movs	r2, #1
 800036a:	4946      	ldr	r1, [pc, #280]	; (8000484 <handleReceivedData+0x300>)
 800036c:	4846      	ldr	r0, [pc, #280]	; (8000488 <handleReceivedData+0x304>)
 800036e:	f000 fcaf 	bl	8000cd0 <SSD1306_Puts>
			SSD1306_GotoXY (70, 0);
 8000372:	2100      	movs	r1, #0
 8000374:	2046      	movs	r0, #70	; 0x46
 8000376:	f000 fc15 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts("3", &Font_11x18, SSD1306_COLOR_WHITE);
 800037a:	2201      	movs	r2, #1
 800037c:	4941      	ldr	r1, [pc, #260]	; (8000484 <handleReceivedData+0x300>)
 800037e:	4846      	ldr	r0, [pc, #280]	; (8000498 <handleReceivedData+0x314>)
 8000380:	f000 fca6 	bl	8000cd0 <SSD1306_Puts>

			SSD1306_GotoXY (0, 25);
 8000384:	2119      	movs	r1, #25
 8000386:	2000      	movs	r0, #0
 8000388:	f000 fc0c 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts("Angle: ", &Font_11x18, SSD1306_COLOR_WHITE);
 800038c:	2201      	movs	r2, #1
 800038e:	493d      	ldr	r1, [pc, #244]	; (8000484 <handleReceivedData+0x300>)
 8000390:	483f      	ldr	r0, [pc, #252]	; (8000490 <handleReceivedData+0x30c>)
 8000392:	f000 fc9d 	bl	8000cd0 <SSD1306_Puts>
			SSD1306_GotoXY (70, 25);
 8000396:	2119      	movs	r1, #25
 8000398:	2046      	movs	r0, #70	; 0x46
 800039a:	f000 fc03 	bl	8000ba4 <SSD1306_GotoXY>
			SSD1306_Puts(&buffer, &Font_11x18, SSD1306_COLOR_WHITE);
 800039e:	2201      	movs	r2, #1
 80003a0:	4938      	ldr	r1, [pc, #224]	; (8000484 <handleReceivedData+0x300>)
 80003a2:	4836      	ldr	r0, [pc, #216]	; (800047c <handleReceivedData+0x2f8>)
 80003a4:	f000 fc94 	bl	8000cd0 <SSD1306_Puts>

			SSD1306_UpdateScreen();
 80003a8:	f000 fb58 	bl	8000a5c <SSD1306_UpdateScreen>
			break;
 80003ac:	e060      	b.n	8000470 <handleReceivedData+0x2ec>
		case 'A':
			memcpy(gripnum, &rx_data[1], 1);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3301      	adds	r3, #1
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	733b      	strb	r3, [r7, #12]
			griptest = atoi(gripnum);
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 fff2 	bl	80043a4 <atoi>
 80003c0:	4603      	mov	r3, r0
 80003c2:	75bb      	strb	r3, [r7, #22]

			if(griptest == 1)
 80003c4:	7dbb      	ldrb	r3, [r7, #22]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d128      	bne.n	800041c <handleReceivedData+0x298>
			{
				grip = map(110, 0, 180, 250, 1250);
 80003ca:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	23fa      	movs	r3, #250	; 0xfa
 80003d2:	22b4      	movs	r2, #180	; 0xb4
 80003d4:	2100      	movs	r1, #0
 80003d6:	206e      	movs	r0, #110	; 0x6e
 80003d8:	f7ff feb8 	bl	800014c <map>
 80003dc:	4603      	mov	r3, r0
 80003de:	4a2f      	ldr	r2, [pc, #188]	; (800049c <handleReceivedData+0x318>)
 80003e0:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, grip);
 80003e2:	4b2e      	ldr	r3, [pc, #184]	; (800049c <handleReceivedData+0x318>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <handleReceivedData+0x31c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(3);
 80003ec:	2003      	movs	r0, #3
 80003ee:	f000 ff39 	bl	8001264 <HAL_Delay>
				SSD1306_GotoXY(0,0);
 80003f2:	2100      	movs	r1, #0
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 fbd5 	bl	8000ba4 <SSD1306_GotoXY>
				SSD1306_Puts("Gripper", &Font_11x18, SSD1306_COLOR_WHITE);
 80003fa:	2201      	movs	r2, #1
 80003fc:	4921      	ldr	r1, [pc, #132]	; (8000484 <handleReceivedData+0x300>)
 80003fe:	4829      	ldr	r0, [pc, #164]	; (80004a4 <handleReceivedData+0x320>)
 8000400:	f000 fc66 	bl	8000cd0 <SSD1306_Puts>

				SSD1306_GotoXY (0, 25);
 8000404:	2119      	movs	r1, #25
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fbcc 	bl	8000ba4 <SSD1306_GotoXY>
				SSD1306_Puts("Open", &Font_11x18, SSD1306_COLOR_WHITE);
 800040c:	2201      	movs	r2, #1
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <handleReceivedData+0x300>)
 8000410:	4825      	ldr	r0, [pc, #148]	; (80004a8 <handleReceivedData+0x324>)
 8000412:	f000 fc5d 	bl	8000cd0 <SSD1306_Puts>

				SSD1306_UpdateScreen();
 8000416:	f000 fb21 	bl	8000a5c <SSD1306_UpdateScreen>
				SSD1306_GotoXY (0, 25);
				SSD1306_Puts("Closed", &Font_11x18, SSD1306_COLOR_WHITE);

				SSD1306_UpdateScreen();
			}
			break;
 800041a:	e029      	b.n	8000470 <handleReceivedData+0x2ec>
				grip = map(70, 0, 180, 250, 1250);
 800041c:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000420:	9300      	str	r3, [sp, #0]
 8000422:	23fa      	movs	r3, #250	; 0xfa
 8000424:	22b4      	movs	r2, #180	; 0xb4
 8000426:	2100      	movs	r1, #0
 8000428:	2046      	movs	r0, #70	; 0x46
 800042a:	f7ff fe8f 	bl	800014c <map>
 800042e:	4603      	mov	r3, r0
 8000430:	4a1a      	ldr	r2, [pc, #104]	; (800049c <handleReceivedData+0x318>)
 8000432:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, grip);
 8000434:	4b19      	ldr	r3, [pc, #100]	; (800049c <handleReceivedData+0x318>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <handleReceivedData+0x31c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(3);
 800043e:	2003      	movs	r0, #3
 8000440:	f000 ff10 	bl	8001264 <HAL_Delay>
				SSD1306_GotoXY(0,0);
 8000444:	2100      	movs	r1, #0
 8000446:	2000      	movs	r0, #0
 8000448:	f000 fbac 	bl	8000ba4 <SSD1306_GotoXY>
				SSD1306_Puts("Gripper", &Font_11x18, SSD1306_COLOR_WHITE);
 800044c:	2201      	movs	r2, #1
 800044e:	490d      	ldr	r1, [pc, #52]	; (8000484 <handleReceivedData+0x300>)
 8000450:	4814      	ldr	r0, [pc, #80]	; (80004a4 <handleReceivedData+0x320>)
 8000452:	f000 fc3d 	bl	8000cd0 <SSD1306_Puts>
				SSD1306_GotoXY (0, 25);
 8000456:	2119      	movs	r1, #25
 8000458:	2000      	movs	r0, #0
 800045a:	f000 fba3 	bl	8000ba4 <SSD1306_GotoXY>
				SSD1306_Puts("Closed", &Font_11x18, SSD1306_COLOR_WHITE);
 800045e:	2201      	movs	r2, #1
 8000460:	4908      	ldr	r1, [pc, #32]	; (8000484 <handleReceivedData+0x300>)
 8000462:	4812      	ldr	r0, [pc, #72]	; (80004ac <handleReceivedData+0x328>)
 8000464:	f000 fc34 	bl	8000cd0 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8000468:	f000 faf8 	bl	8000a5c <SSD1306_UpdateScreen>
			break;
 800046c:	e000      	b.n	8000470 <handleReceivedData+0x2ec>
		   return;  // Invalid data format, handle error or ignore data
 800046e:	bf00      	nop
//	SSD1306_Puts(&buffer, &Font_11x18, 1);
//	SSD1306_UpdateScreen();


		}
}
 8000470:	3720      	adds	r7, #32
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000090 	.word	0x20000090
 800047c:	20000088 	.word	0x20000088
 8000480:	200000ec 	.word	0x200000ec
 8000484:	20000000 	.word	0x20000000
 8000488:	08004554 	.word	0x08004554
 800048c:	0800455c 	.word	0x0800455c
 8000490:	08004560 	.word	0x08004560
 8000494:	08004568 	.word	0x08004568
 8000498:	0800456c 	.word	0x0800456c
 800049c:	20000094 	.word	0x20000094
 80004a0:	20000134 	.word	0x20000134
 80004a4:	08004570 	.word	0x08004570
 80004a8:	08004578 	.word	0x08004578
 80004ac:	08004580 	.word	0x08004580

080004b0 <main>:

int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  HAL_Init();
 80004b4:	f000 fe74 	bl	80011a0 <HAL_Init>

  SystemClock_Config();
 80004b8:	f000 f82e 	bl	8000518 <SystemClock_Config>

  MX_GPIO_Init();
 80004bc:	f000 f9c2 	bl	8000844 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c0:	f000 f866 	bl	8000590 <MX_I2C1_Init>
  MX_TIM2_Init();
 80004c4:	f000 f892 	bl	80005ec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004c8:	f000 f992 	bl	80007f0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80004cc:	f000 f91a 	bl	8000704 <MX_TIM3_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //T2C1  //PA0  Range: 0 to 180
 80004d0:	2100      	movs	r1, #0
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <main+0x58>)
 80004d4:	f002 fcb0 	bl	8002e38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //T1C2  //PA1  Range: 20 to 170
 80004d8:	2104      	movs	r1, #4
 80004da:	480b      	ldr	r0, [pc, #44]	; (8000508 <main+0x58>)
 80004dc:	f002 fcac 	bl	8002e38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //T2C3  //PA3  Range: 30 to 150
 80004e0:	210c      	movs	r1, #12
 80004e2:	4809      	ldr	r0, [pc, #36]	; (8000508 <main+0x58>)
 80004e4:	f002 fca8 	bl	8002e38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //T3C1  //PA6  Range: Closed: 70-75 to Open: 105-110
 80004e8:	2100      	movs	r1, #0
 80004ea:	4808      	ldr	r0, [pc, #32]	; (800050c <main+0x5c>)
 80004ec:	f002 fca4 	bl	8002e38 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1,rx_data,8);
 80004f0:	2208      	movs	r2, #8
 80004f2:	4907      	ldr	r1, [pc, #28]	; (8000510 <main+0x60>)
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x64>)
 80004f6:	f003 fa1d 	bl	8003934 <HAL_UART_Receive_IT>

  SSD1306_Init();
 80004fa:	f000 f9eb 	bl	80008d4 <SSD1306_Init>

  while (1)
  {
	handleReceivedData(rx_data);
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <main+0x60>)
 8000500:	f7ff fe40 	bl	8000184 <handleReceivedData>
 8000504:	e7fb      	b.n	80004fe <main+0x4e>
 8000506:	bf00      	nop
 8000508:	200000ec 	.word	0x200000ec
 800050c:	20000134 	.word	0x20000134
 8000510:	20000080 	.word	0x20000080
 8000514:	2000017c 	.word	0x2000017c

08000518 <SystemClock_Config>:
//	SSD1306_UpdateScreen();
  }
}

void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b090      	sub	sp, #64	; 0x40
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0318 	add.w	r3, r7, #24
 8000522:	2228      	movs	r2, #40	; 0x28
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f003 ffc8 	bl	80044bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053e:	2301      	movs	r3, #1
 8000540:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000542:	2310      	movs	r3, #16
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000546:	2300      	movs	r3, #0
 8000548:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0318 	add.w	r3, r7, #24
 800054e:	4618      	mov	r0, r3
 8000550:	f001 ffba 	bl	80024c8 <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800055a:	f000 f9b5 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	230f      	movs	r3, #15
 8000560:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fa28 	bl	80029cc <HAL_RCC_ClockConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000582:	f000 f9a1 	bl	80008c8 <Error_Handler>
  }
}
 8000586:	bf00      	nop
 8000588:	3740      	adds	r7, #64	; 0x40
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_I2C1_Init+0x50>)
 8000596:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <MX_I2C1_Init+0x54>)
 8000598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_I2C1_Init+0x50>)
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x58>)
 800059e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005ce:	f001 f9b1 	bl	8001934 <HAL_I2C_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005d8:	f000 f976 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000098 	.word	0x20000098
 80005e4:	40005400 	.word	0x40005400
 80005e8:	00061a80 	.word	0x00061a80

080005ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]
 800061a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800061c:	4b38      	ldr	r3, [pc, #224]	; (8000700 <MX_TIM2_Init+0x114>)
 800061e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000622:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <MX_TIM2_Init+0x114>)
 8000626:	220f      	movs	r2, #15
 8000628:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062a:	4b35      	ldr	r3, [pc, #212]	; (8000700 <MX_TIM2_Init+0x114>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <MX_TIM2_Init+0x114>)
 8000632:	f242 720f 	movw	r2, #9999	; 0x270f
 8000636:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <MX_TIM2_Init+0x114>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063e:	4b30      	ldr	r3, [pc, #192]	; (8000700 <MX_TIM2_Init+0x114>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000644:	482e      	ldr	r0, [pc, #184]	; (8000700 <MX_TIM2_Init+0x114>)
 8000646:	f002 fb4f 	bl	8002ce8 <HAL_TIM_Base_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000650:	f000 f93a 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800065a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065e:	4619      	mov	r1, r3
 8000660:	4827      	ldr	r0, [pc, #156]	; (8000700 <MX_TIM2_Init+0x114>)
 8000662:	f002 fd4d 	bl	8003100 <HAL_TIM_ConfigClockSource>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800066c:	f000 f92c 	bl	80008c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000670:	4823      	ldr	r0, [pc, #140]	; (8000700 <MX_TIM2_Init+0x114>)
 8000672:	f002 fb88 	bl	8002d86 <HAL_TIM_PWM_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800067c:	f000 f924 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4619      	mov	r1, r3
 800068e:	481c      	ldr	r0, [pc, #112]	; (8000700 <MX_TIM2_Init+0x114>)
 8000690:	f003 f8a2 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 f915 	bl	80008c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800069e:	2360      	movs	r3, #96	; 0x60
 80006a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	4812      	ldr	r0, [pc, #72]	; (8000700 <MX_TIM2_Init+0x114>)
 80006b6:	f002 fc61 	bl	8002f7c <HAL_TIM_PWM_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80006c0:	f000 f902 	bl	80008c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2204      	movs	r2, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_TIM2_Init+0x114>)
 80006cc:	f002 fc56 	bl	8002f7c <HAL_TIM_PWM_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80006d6:	f000 f8f7 	bl	80008c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	220c      	movs	r2, #12
 80006de:	4619      	mov	r1, r3
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <MX_TIM2_Init+0x114>)
 80006e2:	f002 fc4b 	bl	8002f7c <HAL_TIM_PWM_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80006ec:	f000 f8ec 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006f0:	4803      	ldr	r0, [pc, #12]	; (8000700 <MX_TIM2_Init+0x114>)
 80006f2:	f000 fc53 	bl	8000f9c <HAL_TIM_MspPostInit>

}
 80006f6:	bf00      	nop
 80006f8:	3738      	adds	r7, #56	; 0x38
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000ec 	.word	0x200000ec

08000704 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	; 0x38
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
 8000732:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000734:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <MX_TIM3_Init+0xe4>)
 8000736:	4a2d      	ldr	r2, [pc, #180]	; (80007ec <MX_TIM3_Init+0xe8>)
 8000738:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_TIM3_Init+0xe4>)
 800073c:	220f      	movs	r2, #15
 800073e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <MX_TIM3_Init+0xe4>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <MX_TIM3_Init+0xe4>)
 8000748:	f242 720f 	movw	r2, #9999	; 0x270f
 800074c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_TIM3_Init+0xe4>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_TIM3_Init+0xe4>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800075a:	4823      	ldr	r0, [pc, #140]	; (80007e8 <MX_TIM3_Init+0xe4>)
 800075c:	f002 fac4 	bl	8002ce8 <HAL_TIM_Base_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000766:	f000 f8af 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000774:	4619      	mov	r1, r3
 8000776:	481c      	ldr	r0, [pc, #112]	; (80007e8 <MX_TIM3_Init+0xe4>)
 8000778:	f002 fcc2 	bl	8003100 <HAL_TIM_ConfigClockSource>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000782:	f000 f8a1 	bl	80008c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000786:	4818      	ldr	r0, [pc, #96]	; (80007e8 <MX_TIM3_Init+0xe4>)
 8000788:	f002 fafd 	bl	8002d86 <HAL_TIM_PWM_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000792:	f000 f899 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	4619      	mov	r1, r3
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <MX_TIM3_Init+0xe4>)
 80007a6:	f003 f817 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007b0:	f000 f88a 	bl	80008c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <MX_TIM3_Init+0xe4>)
 80007cc:	f002 fbd6 	bl	8002f7c <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80007d6:	f000 f877 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <MX_TIM3_Init+0xe4>)
 80007dc:	f000 fbde 	bl	8000f9c <HAL_TIM_MspPostInit>

}
 80007e0:	bf00      	nop
 80007e2:	3738      	adds	r7, #56	; 0x38
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000134 	.word	0x20000134
 80007ec:	40000400 	.word	0x40000400

080007f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART1_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_USART1_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART1_UART_Init+0x4c>)
 80007fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART1_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART1_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART1_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART1_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART1_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART1_UART_Init+0x4c>)
 8000828:	f003 f834 	bl	8003894 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f849 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000017c 	.word	0x2000017c
 8000840:	40013800 	.word	0x40013800

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_GPIO_Init+0x40>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <MX_GPIO_Init+0x40>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_GPIO_Init+0x40>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_GPIO_Init+0x40>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <MX_GPIO_Init+0x40>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <MX_GPIO_Init+0x40>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a09      	ldr	r2, [pc, #36]	; (80008bc <HAL_UART_RxCpltCallback+0x34>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d10b      	bne.n	80008b2 <HAL_UART_RxCpltCallback+0x2a>
  {
	SSD1306_Clear();
 800089a:	f000 fa3e 	bl	8000d1a <SSD1306_Clear>
	memset(rx_data, 0, sizeof(rx_data));
 800089e:	2208      	movs	r2, #8
 80008a0:	2100      	movs	r1, #0
 80008a2:	4807      	ldr	r0, [pc, #28]	; (80008c0 <HAL_UART_RxCpltCallback+0x38>)
 80008a4:	f003 fe0a 	bl	80044bc <memset>
    HAL_UART_Receive_IT(&huart1,rx_data,8);
 80008a8:	2208      	movs	r2, #8
 80008aa:	4905      	ldr	r1, [pc, #20]	; (80008c0 <HAL_UART_RxCpltCallback+0x38>)
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <HAL_UART_RxCpltCallback+0x3c>)
 80008ae:	f003 f841 	bl	8003934 <HAL_UART_Receive_IT>
//    handleReceivedData(rx_data);
  }
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40013800 	.word	0x40013800
 80008c0:	20000080 	.word	0x20000080
 80008c4:	2000017c 	.word	0x2000017c

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80008da:	f000 fa27 	bl	8000d2c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80008de:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008e2:	2201      	movs	r2, #1
 80008e4:	2178      	movs	r1, #120	; 0x78
 80008e6:	485b      	ldr	r0, [pc, #364]	; (8000a54 <SSD1306_Init+0x180>)
 80008e8:	f001 fa66 	bl	8001db8 <HAL_I2C_IsDeviceReady>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e0a9      	b.n	8000a4a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80008f6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80008fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008fc:	e002      	b.n	8000904 <SSD1306_Init+0x30>
		p--;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3b01      	subs	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1f9      	bne.n	80008fe <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800090a:	22ae      	movs	r2, #174	; 0xae
 800090c:	2100      	movs	r1, #0
 800090e:	2078      	movs	r0, #120	; 0x78
 8000910:	f000 fa86 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000914:	2220      	movs	r2, #32
 8000916:	2100      	movs	r1, #0
 8000918:	2078      	movs	r0, #120	; 0x78
 800091a:	f000 fa81 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800091e:	2210      	movs	r2, #16
 8000920:	2100      	movs	r1, #0
 8000922:	2078      	movs	r0, #120	; 0x78
 8000924:	f000 fa7c 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000928:	22b0      	movs	r2, #176	; 0xb0
 800092a:	2100      	movs	r1, #0
 800092c:	2078      	movs	r0, #120	; 0x78
 800092e:	f000 fa77 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000932:	22c8      	movs	r2, #200	; 0xc8
 8000934:	2100      	movs	r1, #0
 8000936:	2078      	movs	r0, #120	; 0x78
 8000938:	f000 fa72 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2078      	movs	r0, #120	; 0x78
 8000942:	f000 fa6d 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000946:	2210      	movs	r2, #16
 8000948:	2100      	movs	r1, #0
 800094a:	2078      	movs	r0, #120	; 0x78
 800094c:	f000 fa68 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000950:	2240      	movs	r2, #64	; 0x40
 8000952:	2100      	movs	r1, #0
 8000954:	2078      	movs	r0, #120	; 0x78
 8000956:	f000 fa63 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800095a:	2281      	movs	r2, #129	; 0x81
 800095c:	2100      	movs	r1, #0
 800095e:	2078      	movs	r0, #120	; 0x78
 8000960:	f000 fa5e 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000964:	22ff      	movs	r2, #255	; 0xff
 8000966:	2100      	movs	r1, #0
 8000968:	2078      	movs	r0, #120	; 0x78
 800096a:	f000 fa59 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800096e:	22a1      	movs	r2, #161	; 0xa1
 8000970:	2100      	movs	r1, #0
 8000972:	2078      	movs	r0, #120	; 0x78
 8000974:	f000 fa54 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000978:	22a6      	movs	r2, #166	; 0xa6
 800097a:	2100      	movs	r1, #0
 800097c:	2078      	movs	r0, #120	; 0x78
 800097e:	f000 fa4f 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000982:	22a8      	movs	r2, #168	; 0xa8
 8000984:	2100      	movs	r1, #0
 8000986:	2078      	movs	r0, #120	; 0x78
 8000988:	f000 fa4a 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800098c:	223f      	movs	r2, #63	; 0x3f
 800098e:	2100      	movs	r1, #0
 8000990:	2078      	movs	r0, #120	; 0x78
 8000992:	f000 fa45 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000996:	22a4      	movs	r2, #164	; 0xa4
 8000998:	2100      	movs	r1, #0
 800099a:	2078      	movs	r0, #120	; 0x78
 800099c:	f000 fa40 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80009a0:	22d3      	movs	r2, #211	; 0xd3
 80009a2:	2100      	movs	r1, #0
 80009a4:	2078      	movs	r0, #120	; 0x78
 80009a6:	f000 fa3b 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2078      	movs	r0, #120	; 0x78
 80009b0:	f000 fa36 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009b4:	22d5      	movs	r2, #213	; 0xd5
 80009b6:	2100      	movs	r1, #0
 80009b8:	2078      	movs	r0, #120	; 0x78
 80009ba:	f000 fa31 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009be:	22f0      	movs	r2, #240	; 0xf0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2078      	movs	r0, #120	; 0x78
 80009c4:	f000 fa2c 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80009c8:	22d9      	movs	r2, #217	; 0xd9
 80009ca:	2100      	movs	r1, #0
 80009cc:	2078      	movs	r0, #120	; 0x78
 80009ce:	f000 fa27 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80009d2:	2222      	movs	r2, #34	; 0x22
 80009d4:	2100      	movs	r1, #0
 80009d6:	2078      	movs	r0, #120	; 0x78
 80009d8:	f000 fa22 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80009dc:	22da      	movs	r2, #218	; 0xda
 80009de:	2100      	movs	r1, #0
 80009e0:	2078      	movs	r0, #120	; 0x78
 80009e2:	f000 fa1d 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80009e6:	2212      	movs	r2, #18
 80009e8:	2100      	movs	r1, #0
 80009ea:	2078      	movs	r0, #120	; 0x78
 80009ec:	f000 fa18 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80009f0:	22db      	movs	r2, #219	; 0xdb
 80009f2:	2100      	movs	r1, #0
 80009f4:	2078      	movs	r0, #120	; 0x78
 80009f6:	f000 fa13 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80009fa:	2220      	movs	r2, #32
 80009fc:	2100      	movs	r1, #0
 80009fe:	2078      	movs	r0, #120	; 0x78
 8000a00:	f000 fa0e 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a04:	228d      	movs	r2, #141	; 0x8d
 8000a06:	2100      	movs	r1, #0
 8000a08:	2078      	movs	r0, #120	; 0x78
 8000a0a:	f000 fa09 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a0e:	2214      	movs	r2, #20
 8000a10:	2100      	movs	r1, #0
 8000a12:	2078      	movs	r0, #120	; 0x78
 8000a14:	f000 fa04 	bl	8000e20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a18:	22af      	movs	r2, #175	; 0xaf
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2078      	movs	r0, #120	; 0x78
 8000a1e:	f000 f9ff 	bl	8000e20 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a22:	222e      	movs	r2, #46	; 0x2e
 8000a24:	2100      	movs	r1, #0
 8000a26:	2078      	movs	r0, #120	; 0x78
 8000a28:	f000 f9fa 	bl	8000e20 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 f843 	bl	8000ab8 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000a32:	f000 f813 	bl	8000a5c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <SSD1306_Init+0x184>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <SSD1306_Init+0x184>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SSD1306_Init+0x184>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000098 	.word	0x20000098
 8000a58:	200005c4 	.word	0x200005c4

08000a5c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	e01d      	b.n	8000aa4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	3b50      	subs	r3, #80	; 0x50
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	2100      	movs	r1, #0
 8000a72:	2078      	movs	r0, #120	; 0x78
 8000a74:	f000 f9d4 	bl	8000e20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2078      	movs	r0, #120	; 0x78
 8000a7e:	f000 f9cf 	bl	8000e20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a82:	2210      	movs	r2, #16
 8000a84:	2100      	movs	r1, #0
 8000a86:	2078      	movs	r0, #120	; 0x78
 8000a88:	f000 f9ca 	bl	8000e20 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	01db      	lsls	r3, r3, #7
 8000a90:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <SSD1306_UpdateScreen+0x58>)
 8000a92:	441a      	add	r2, r3
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	2078      	movs	r0, #120	; 0x78
 8000a9a:	f000 f95b 	bl	8000d54 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b07      	cmp	r3, #7
 8000aa8:	d9de      	bls.n	8000a68 <SSD1306_UpdateScreen+0xc>
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001c4 	.word	0x200001c4

08000ab8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d101      	bne.n	8000acc <SSD1306_Fill+0x14>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e000      	b.n	8000ace <SSD1306_Fill+0x16>
 8000acc:	23ff      	movs	r3, #255	; 0xff
 8000ace:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <SSD1306_Fill+0x2c>)
 8000ad6:	f003 fcf1 	bl	80044bc <memset>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001c4 	.word	0x200001c4

08000ae8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
 8000af2:	460b      	mov	r3, r1
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	4613      	mov	r3, r2
 8000af8:	70fb      	strb	r3, [r7, #3]
	if (
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	2b7f      	cmp	r3, #127	; 0x7f
 8000afe:	d848      	bhi.n	8000b92 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	2b3f      	cmp	r3, #63	; 0x3f
 8000b04:	d845      	bhi.n	8000b92 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <SSD1306_DrawPixel+0xb4>)
 8000b08:	791b      	ldrb	r3, [r3, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	bf0c      	ite	eq
 8000b14:	2301      	moveq	r3, #1
 8000b16:	2300      	movne	r3, #0
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d11a      	bne.n	8000b58 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b22:	88fa      	ldrh	r2, [r7, #6]
 8000b24:	88bb      	ldrh	r3, [r7, #4]
 8000b26:	08db      	lsrs	r3, r3, #3
 8000b28:	b298      	uxth	r0, r3
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	01db      	lsls	r3, r3, #7
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <SSD1306_DrawPixel+0xb8>)
 8000b32:	5cd3      	ldrb	r3, [r2, r3]
 8000b34:	b25a      	sxtb	r2, r3
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	4313      	orrs	r3, r2
 8000b46:	b259      	sxtb	r1, r3
 8000b48:	88fa      	ldrh	r2, [r7, #6]
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	01db      	lsls	r3, r3, #7
 8000b4e:	4413      	add	r3, r2
 8000b50:	b2c9      	uxtb	r1, r1
 8000b52:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <SSD1306_DrawPixel+0xb8>)
 8000b54:	54d1      	strb	r1, [r2, r3]
 8000b56:	e01d      	b.n	8000b94 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b58:	88fa      	ldrh	r2, [r7, #6]
 8000b5a:	88bb      	ldrh	r3, [r7, #4]
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	b298      	uxth	r0, r3
 8000b60:	4603      	mov	r3, r0
 8000b62:	01db      	lsls	r3, r3, #7
 8000b64:	4413      	add	r3, r2
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <SSD1306_DrawPixel+0xb8>)
 8000b68:	5cd3      	ldrb	r3, [r2, r3]
 8000b6a:	b25a      	sxtb	r2, r3
 8000b6c:	88bb      	ldrh	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	4013      	ands	r3, r2
 8000b80:	b259      	sxtb	r1, r3
 8000b82:	88fa      	ldrh	r2, [r7, #6]
 8000b84:	4603      	mov	r3, r0
 8000b86:	01db      	lsls	r3, r3, #7
 8000b88:	4413      	add	r3, r2
 8000b8a:	b2c9      	uxtb	r1, r1
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <SSD1306_DrawPixel+0xb8>)
 8000b8e:	54d1      	strb	r1, [r2, r3]
 8000b90:	e000      	b.n	8000b94 <SSD1306_DrawPixel+0xac>
		return;
 8000b92:	bf00      	nop
	}
}
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	200005c4 	.word	0x200005c4
 8000ba0:	200001c4 	.word	0x200001c4

08000ba4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	460a      	mov	r2, r1
 8000bae:	80fb      	strh	r3, [r7, #6]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000bb4:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SSD1306_GotoXY+0x28>)
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <SSD1306_GotoXY+0x28>)
 8000bbc:	88bb      	ldrh	r3, [r7, #4]
 8000bbe:	8053      	strh	r3, [r2, #2]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200005c4 	.word	0x200005c4

08000bd0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000be0:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <SSD1306_Putc+0xfc>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
	if (
 8000bec:	2b7f      	cmp	r3, #127	; 0x7f
 8000bee:	dc07      	bgt.n	8000c00 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000bf0:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <SSD1306_Putc+0xfc>)
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	785b      	ldrb	r3, [r3, #1]
 8000bfa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bfc:	2b3f      	cmp	r3, #63	; 0x3f
 8000bfe:	dd01      	ble.n	8000c04 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	e05e      	b.n	8000cc2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e04b      	b.n	8000ca2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	3b20      	subs	r3, #32
 8000c12:	6839      	ldr	r1, [r7, #0]
 8000c14:	7849      	ldrb	r1, [r1, #1]
 8000c16:	fb01 f303 	mul.w	r3, r1, r3
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	440b      	add	r3, r1
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	e030      	b.n	8000c90 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d010      	beq.n	8000c60 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <SSD1306_Putc+0xfc>)
 8000c40:	881a      	ldrh	r2, [r3, #0]
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	4413      	add	r3, r2
 8000c48:	b298      	uxth	r0, r3
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <SSD1306_Putc+0xfc>)
 8000c4c:	885a      	ldrh	r2, [r3, #2]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4413      	add	r3, r2
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	79ba      	ldrb	r2, [r7, #6]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f7ff ff45 	bl	8000ae8 <SSD1306_DrawPixel>
 8000c5e:	e014      	b.n	8000c8a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <SSD1306_Putc+0xfc>)
 8000c62:	881a      	ldrh	r2, [r3, #0]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	4413      	add	r3, r2
 8000c6a:	b298      	uxth	r0, r3
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <SSD1306_Putc+0xfc>)
 8000c6e:	885a      	ldrh	r2, [r3, #2]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	4413      	add	r3, r2
 8000c76:	b299      	uxth	r1, r3
 8000c78:	79bb      	ldrb	r3, [r7, #6]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bf0c      	ite	eq
 8000c7e:	2301      	moveq	r3, #1
 8000c80:	2300      	movne	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	f7ff ff2f 	bl	8000ae8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d3c8      	bcc.n	8000c2e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	785b      	ldrb	r3, [r3, #1]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d3ad      	bcc.n	8000c0a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <SSD1306_Putc+0xfc>)
 8000cb0:	881a      	ldrh	r2, [r3, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <SSD1306_Putc+0xfc>)
 8000cbe:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200005c4 	.word	0x200005c4

08000cd0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000cde:	e012      	b.n	8000d06 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	79fa      	ldrb	r2, [r7, #7]
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff71 	bl	8000bd0 <SSD1306_Putc>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d002      	beq.n	8000d00 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	e008      	b.n	8000d12 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3301      	adds	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1e8      	bne.n	8000ce0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	781b      	ldrb	r3, [r3, #0]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff feca 	bl	8000ab8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000d24:	f7ff fe9a 	bl	8000a5c <SSD1306_UpdateScreen>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <ssd1306_I2C_Init+0x24>)
 8000d34:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d36:	e002      	b.n	8000d3e <ssd1306_I2C_Init+0x12>
		p--;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1f9      	bne.n	8000d38 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	0003d090 	.word	0x0003d090

08000d54 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b0c7      	sub	sp, #284	; 0x11c
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000d62:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000d66:	600a      	str	r2, [r1, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d6e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d72:	4622      	mov	r2, r4
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d7a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000d7e:	4602      	mov	r2, r0
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d8a:	460a      	mov	r2, r1
 8000d8c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000d8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d96:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d9a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000d9e:	7812      	ldrb	r2, [r2, #0]
 8000da0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000da8:	e015      	b.n	8000dd6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000daa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000db2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	441a      	add	r2, r3
 8000dba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	7811      	ldrb	r1, [r2, #0]
 8000dc2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000dc6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000dca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000dcc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000dd6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000de0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000de4:	8812      	ldrh	r2, [r2, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d8df      	bhi.n	8000daa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000dea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b299      	uxth	r1, r3
 8000df6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	f107 020c 	add.w	r2, r7, #12
 8000e08:	200a      	movs	r0, #10
 8000e0a:	9000      	str	r0, [sp, #0]
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <ssd1306_I2C_WriteMulti+0xc8>)
 8000e0e:	f000 fed5 	bl	8001bbc <HAL_I2C_Master_Transmit>
}
 8000e12:	bf00      	nop
 8000e14:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	20000098 	.word	0x20000098

08000e20 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	71bb      	strb	r3, [r7, #6]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000e36:	797b      	ldrb	r3, [r7, #5]
 8000e38:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	f107 020c 	add.w	r2, r7, #12
 8000e42:	230a      	movs	r3, #10
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2302      	movs	r3, #2
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <ssd1306_I2C_Write+0x38>)
 8000e4a:	f000 feb7 	bl	8001bbc <HAL_I2C_Master_Transmit>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000098 	.word	0x20000098

08000e5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_MspInit+0x60>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_MspInit+0x60>)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000

08000ec0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <HAL_I2C_MspInit+0x70>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d123      	bne.n	8000f28 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_I2C_MspInit+0x74>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <HAL_I2C_MspInit+0x74>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_I2C_MspInit+0x74>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef8:	23c0      	movs	r3, #192	; 0xc0
 8000efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efc:	2312      	movs	r3, #18
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <HAL_I2C_MspInit+0x78>)
 8000f0c:	f000 fb8e 	bl	800162c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_I2C_MspInit+0x74>)
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_I2C_MspInit+0x74>)
 8000f16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f1a:	61d3      	str	r3, [r2, #28]
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_I2C_MspInit+0x74>)
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40005400 	.word	0x40005400
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010c00 	.word	0x40010c00

08000f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f4c:	d10c      	bne.n	8000f68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_TIM_Base_MspInit+0x58>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_TIM_Base_MspInit+0x58>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_TIM_Base_MspInit+0x58>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f66:	e010      	b.n	8000f8a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_TIM_Base_MspInit+0x5c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d10b      	bne.n	8000f8a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_TIM_Base_MspInit+0x58>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_TIM_Base_MspInit+0x58>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_TIM_Base_MspInit+0x58>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40000400 	.word	0x40000400

08000f9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fba:	d118      	bne.n	8000fee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_TIM_MspPostInit+0x94>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <HAL_TIM_MspPostInit+0x94>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_TIM_MspPostInit+0x94>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000fd4:	230b      	movs	r3, #11
 8000fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4813      	ldr	r0, [pc, #76]	; (8001034 <HAL_TIM_MspPostInit+0x98>)
 8000fe8:	f000 fb20 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fec:	e01c      	b.n	8001028 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a11      	ldr	r2, [pc, #68]	; (8001038 <HAL_TIM_MspPostInit+0x9c>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d117      	bne.n	8001028 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_TIM_MspPostInit+0x94>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <HAL_TIM_MspPostInit+0x94>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_TIM_MspPostInit+0x94>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001010:	2340      	movs	r3, #64	; 0x40
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2302      	movs	r3, #2
 800101a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	4804      	ldr	r0, [pc, #16]	; (8001034 <HAL_TIM_MspPostInit+0x98>)
 8001024:	f000 fb02 	bl	800162c <HAL_GPIO_Init>
}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000
 8001034:	40010800 	.word	0x40010800
 8001038:	40000400 	.word	0x40000400

0800103c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <HAL_UART_MspInit+0x9c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d139      	bne.n	80010d0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_UART_MspInit+0xa0>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <HAL_UART_MspInit+0xa0>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_UART_MspInit+0xa0>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_UART_MspInit+0xa0>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <HAL_UART_MspInit+0xa0>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_UART_MspInit+0xa0>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800108c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001090:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	480f      	ldr	r0, [pc, #60]	; (80010e0 <HAL_UART_MspInit+0xa4>)
 80010a2:	f000 fac3 	bl	800162c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4619      	mov	r1, r3
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <HAL_UART_MspInit+0xa4>)
 80010bc:	f000 fab6 	bl	800162c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2025      	movs	r0, #37	; 0x25
 80010c6:	f000 f9c8 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ca:	2025      	movs	r0, #37	; 0x25
 80010cc:	f000 f9e1 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112a:	f000 f87f 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <USART1_IRQHandler+0x10>)
 800113a:	f002 fc21 	bl	8003980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000017c 	.word	0x2000017c

08001148 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001154:	f7ff fff8 	bl	8001148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800115a:	490c      	ldr	r1, [pc, #48]	; (800118c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800115c:	4a0c      	ldr	r2, [pc, #48]	; (8001190 <LoopFillZerobss+0x16>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a09      	ldr	r2, [pc, #36]	; (8001194 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001170:	4c09      	ldr	r4, [pc, #36]	; (8001198 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117e:	f003 f9ab 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001182:	f7ff f995 	bl	80004b0 <main>
  bx lr
 8001186:	4770      	bx	lr
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001190:	08005418 	.word	0x08005418
  ldr r2, =_sbss
 8001194:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001198:	20000708 	.word	0x20000708

0800119c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_2_IRQHandler>
	...

080011a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_Init+0x28>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_Init+0x28>)
 80011aa:	f043 0310 	orr.w	r3, r3, #16
 80011ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f947 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	200f      	movs	r0, #15
 80011b8:	f000 f808 	bl	80011cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fe4e 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40022000 	.word	0x40022000

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x54>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x58>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f95f 	bl	80014ae <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00e      	b.n	8001218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d80a      	bhi.n	8001216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f000 f927 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_InitTick+0x5c>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000008 	.word	0x20000008
 8001224:	20000010 	.word	0x20000010
 8001228:	2000000c 	.word	0x2000000c

0800122c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x1c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x20>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a03      	ldr	r2, [pc, #12]	; (800124c <HAL_IncTick+0x20>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	20000010 	.word	0x20000010
 800124c:	200005cc 	.word	0x200005cc

08001250 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b02      	ldr	r3, [pc, #8]	; (8001260 <HAL_GetTick+0x10>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	200005cc 	.word	0x200005cc

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff fff0 	bl	8001250 <HAL_GetTick>
 8001270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_Delay+0x44>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128a:	bf00      	nop
 800128c:	f7ff ffe0 	bl	8001250 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000010 	.word	0x20000010

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4906      	ldr	r1, [pc, #24]	; (8001344 <__NVIC_EnableIRQ+0x34>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	; (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
         );
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f7ff ff90 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff2d 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff42 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff90 	bl	800139c <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5f 	bl	8001348 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff35 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa2 	bl	8001400 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d008      	beq.n	80014f0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2204      	movs	r2, #4
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e020      	b.n	8001532 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020e 	bic.w	r2, r2, #14
 80014fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001518:	2101      	movs	r1, #1
 800151a:	fa01 f202 	lsl.w	r2, r1, r2
 800151e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001530:	7bfb      	ldrb	r3, [r7, #15]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d005      	beq.n	8001560 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2204      	movs	r2, #4
 8001558:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	e051      	b.n	8001604 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 020e 	bic.w	r2, r2, #14
 800156e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a22      	ldr	r2, [pc, #136]	; (8001610 <HAL_DMA_Abort_IT+0xd4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d029      	beq.n	80015de <HAL_DMA_Abort_IT+0xa2>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a21      	ldr	r2, [pc, #132]	; (8001614 <HAL_DMA_Abort_IT+0xd8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d022      	beq.n	80015da <HAL_DMA_Abort_IT+0x9e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <HAL_DMA_Abort_IT+0xdc>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01a      	beq.n	80015d4 <HAL_DMA_Abort_IT+0x98>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1e      	ldr	r2, [pc, #120]	; (800161c <HAL_DMA_Abort_IT+0xe0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d012      	beq.n	80015ce <HAL_DMA_Abort_IT+0x92>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <HAL_DMA_Abort_IT+0xe4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00a      	beq.n	80015c8 <HAL_DMA_Abort_IT+0x8c>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <HAL_DMA_Abort_IT+0xe8>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d102      	bne.n	80015c2 <HAL_DMA_Abort_IT+0x86>
 80015bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015c0:	e00e      	b.n	80015e0 <HAL_DMA_Abort_IT+0xa4>
 80015c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c6:	e00b      	b.n	80015e0 <HAL_DMA_Abort_IT+0xa4>
 80015c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015cc:	e008      	b.n	80015e0 <HAL_DMA_Abort_IT+0xa4>
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	e005      	b.n	80015e0 <HAL_DMA_Abort_IT+0xa4>
 80015d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d8:	e002      	b.n	80015e0 <HAL_DMA_Abort_IT+0xa4>
 80015da:	2310      	movs	r3, #16
 80015dc:	e000      	b.n	80015e0 <HAL_DMA_Abort_IT+0xa4>
 80015de:	2301      	movs	r3, #1
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <HAL_DMA_Abort_IT+0xec>)
 80015e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	4798      	blx	r3
    } 
  }
  return status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40020008 	.word	0x40020008
 8001614:	4002001c 	.word	0x4002001c
 8001618:	40020030 	.word	0x40020030
 800161c:	40020044 	.word	0x40020044
 8001620:	40020058 	.word	0x40020058
 8001624:	4002006c 	.word	0x4002006c
 8001628:	40020000 	.word	0x40020000

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b08b      	sub	sp, #44	; 0x2c
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e169      	b.n	8001914 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001640:	2201      	movs	r2, #1
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8158 	bne.w	800190e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a9a      	ldr	r2, [pc, #616]	; (80018cc <HAL_GPIO_Init+0x2a0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d05e      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001668:	4a98      	ldr	r2, [pc, #608]	; (80018cc <HAL_GPIO_Init+0x2a0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d875      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800166e:	4a98      	ldr	r2, [pc, #608]	; (80018d0 <HAL_GPIO_Init+0x2a4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d058      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001674:	4a96      	ldr	r2, [pc, #600]	; (80018d0 <HAL_GPIO_Init+0x2a4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d86f      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800167a:	4a96      	ldr	r2, [pc, #600]	; (80018d4 <HAL_GPIO_Init+0x2a8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d052      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001680:	4a94      	ldr	r2, [pc, #592]	; (80018d4 <HAL_GPIO_Init+0x2a8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d869      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001686:	4a94      	ldr	r2, [pc, #592]	; (80018d8 <HAL_GPIO_Init+0x2ac>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d04c      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 800168c:	4a92      	ldr	r2, [pc, #584]	; (80018d8 <HAL_GPIO_Init+0x2ac>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d863      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001692:	4a92      	ldr	r2, [pc, #584]	; (80018dc <HAL_GPIO_Init+0x2b0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d046      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001698:	4a90      	ldr	r2, [pc, #576]	; (80018dc <HAL_GPIO_Init+0x2b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d85d      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d82a      	bhi.n	80016f8 <HAL_GPIO_Init+0xcc>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d859      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 80016a6:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <HAL_GPIO_Init+0x80>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001701 	.word	0x08001701
 80016b4:	08001713 	.word	0x08001713
 80016b8:	08001755 	.word	0x08001755
 80016bc:	0800175b 	.word	0x0800175b
 80016c0:	0800175b 	.word	0x0800175b
 80016c4:	0800175b 	.word	0x0800175b
 80016c8:	0800175b 	.word	0x0800175b
 80016cc:	0800175b 	.word	0x0800175b
 80016d0:	0800175b 	.word	0x0800175b
 80016d4:	0800175b 	.word	0x0800175b
 80016d8:	0800175b 	.word	0x0800175b
 80016dc:	0800175b 	.word	0x0800175b
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	0800175b 	.word	0x0800175b
 80016e8:	0800175b 	.word	0x0800175b
 80016ec:	0800175b 	.word	0x0800175b
 80016f0:	08001709 	.word	0x08001709
 80016f4:	0800171d 	.word	0x0800171d
 80016f8:	4a79      	ldr	r2, [pc, #484]	; (80018e0 <HAL_GPIO_Init+0x2b4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fe:	e02c      	b.n	800175a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e029      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	3304      	adds	r3, #4
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e024      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	3308      	adds	r3, #8
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e01f      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	330c      	adds	r3, #12
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e01a      	b.n	800175c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800172e:	2304      	movs	r3, #4
 8001730:	623b      	str	r3, [r7, #32]
          break;
 8001732:	e013      	b.n	800175c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800173c:	2308      	movs	r3, #8
 800173e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	611a      	str	r2, [r3, #16]
          break;
 8001746:	e009      	b.n	800175c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001748:	2308      	movs	r3, #8
 800174a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	615a      	str	r2, [r3, #20]
          break;
 8001752:	e003      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x130>
          break;
 800175a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2bff      	cmp	r3, #255	; 0xff
 8001760:	d801      	bhi.n	8001766 <HAL_GPIO_Init+0x13a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	e001      	b.n	800176a <HAL_GPIO_Init+0x13e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3304      	adds	r3, #4
 800176a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d802      	bhi.n	8001778 <HAL_GPIO_Init+0x14c>
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x152>
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	3b08      	subs	r3, #8
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	210f      	movs	r1, #15
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	401a      	ands	r2, r3
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	431a      	orrs	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80b1 	beq.w	800190e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ac:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a4c      	ldr	r2, [pc, #304]	; (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c4:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a40      	ldr	r2, [pc, #256]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d013      	beq.n	8001818 <HAL_GPIO_Init+0x1ec>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a3f      	ldr	r2, [pc, #252]	; (80018f0 <HAL_GPIO_Init+0x2c4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00d      	beq.n	8001814 <HAL_GPIO_Init+0x1e8>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a3e      	ldr	r2, [pc, #248]	; (80018f4 <HAL_GPIO_Init+0x2c8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d007      	beq.n	8001810 <HAL_GPIO_Init+0x1e4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a3d      	ldr	r2, [pc, #244]	; (80018f8 <HAL_GPIO_Init+0x2cc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d101      	bne.n	800180c <HAL_GPIO_Init+0x1e0>
 8001808:	2303      	movs	r3, #3
 800180a:	e006      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 800180c:	2304      	movs	r3, #4
 800180e:	e004      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001810:	2302      	movs	r3, #2
 8001812:	e002      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001818:	2300      	movs	r3, #0
 800181a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181c:	f002 0203 	and.w	r2, r2, #3
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	4093      	lsls	r3, r2
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800182a:	492f      	ldr	r1, [pc, #188]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	492c      	ldr	r1, [pc, #176]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4928      	ldr	r1, [pc, #160]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800185c:	4013      	ands	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	4922      	ldr	r1, [pc, #136]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	491e      	ldr	r1, [pc, #120]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001884:	4013      	ands	r3, r2
 8001886:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	4918      	ldr	r1, [pc, #96]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4914      	ldr	r1, [pc, #80]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d021      	beq.n	8001900 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e021      	b.n	800190e <HAL_GPIO_Init+0x2e2>
 80018ca:	bf00      	nop
 80018cc:	10320000 	.word	0x10320000
 80018d0:	10310000 	.word	0x10310000
 80018d4:	10220000 	.word	0x10220000
 80018d8:	10210000 	.word	0x10210000
 80018dc:	10120000 	.word	0x10120000
 80018e0:	10110000 	.word	0x10110000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000
 80018ec:	40010800 	.word	0x40010800
 80018f0:	40010c00 	.word	0x40010c00
 80018f4:	40011000 	.word	0x40011000
 80018f8:	40011400 	.word	0x40011400
 80018fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_GPIO_Init+0x304>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	4909      	ldr	r1, [pc, #36]	; (8001930 <HAL_GPIO_Init+0x304>)
 800190a:	4013      	ands	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f ae8e 	bne.w	8001640 <HAL_GPIO_Init+0x14>
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	372c      	adds	r7, #44	; 0x2c
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e12b      	b.n	8001b9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d106      	bne.n	8001960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fab0 	bl	8000ec0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2224      	movs	r2, #36	; 0x24
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001986:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001996:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001998:	f001 f960 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 800199c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4a81      	ldr	r2, [pc, #516]	; (8001ba8 <HAL_I2C_Init+0x274>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d807      	bhi.n	80019b8 <HAL_I2C_Init+0x84>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4a80      	ldr	r2, [pc, #512]	; (8001bac <HAL_I2C_Init+0x278>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	bf94      	ite	ls
 80019b0:	2301      	movls	r3, #1
 80019b2:	2300      	movhi	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	e006      	b.n	80019c6 <HAL_I2C_Init+0x92>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4a7d      	ldr	r2, [pc, #500]	; (8001bb0 <HAL_I2C_Init+0x27c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	bf94      	ite	ls
 80019c0:	2301      	movls	r3, #1
 80019c2:	2300      	movhi	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0e7      	b.n	8001b9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4a78      	ldr	r2, [pc, #480]	; (8001bb4 <HAL_I2C_Init+0x280>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0c9b      	lsrs	r3, r3, #18
 80019d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4a6a      	ldr	r2, [pc, #424]	; (8001ba8 <HAL_I2C_Init+0x274>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d802      	bhi.n	8001a08 <HAL_I2C_Init+0xd4>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	3301      	adds	r3, #1
 8001a06:	e009      	b.n	8001a1c <HAL_I2C_Init+0xe8>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	4a69      	ldr	r2, [pc, #420]	; (8001bb8 <HAL_I2C_Init+0x284>)
 8001a14:	fba2 2303 	umull	r2, r3, r2, r3
 8001a18:	099b      	lsrs	r3, r3, #6
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	430b      	orrs	r3, r1
 8001a22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	495c      	ldr	r1, [pc, #368]	; (8001ba8 <HAL_I2C_Init+0x274>)
 8001a38:	428b      	cmp	r3, r1
 8001a3a:	d819      	bhi.n	8001a70 <HAL_I2C_Init+0x13c>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e59      	subs	r1, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a4a:	1c59      	adds	r1, r3, #1
 8001a4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a50:	400b      	ands	r3, r1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00a      	beq.n	8001a6c <HAL_I2C_Init+0x138>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1e59      	subs	r1, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6a:	e051      	b.n	8001b10 <HAL_I2C_Init+0x1dc>
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	e04f      	b.n	8001b10 <HAL_I2C_Init+0x1dc>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d111      	bne.n	8001a9c <HAL_I2C_Init+0x168>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1e58      	subs	r0, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	440b      	add	r3, r1
 8001a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	e012      	b.n	8001ac2 <HAL_I2C_Init+0x18e>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1e58      	subs	r0, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	0099      	lsls	r1, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Init+0x196>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e022      	b.n	8001b10 <HAL_I2C_Init+0x1dc>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10e      	bne.n	8001af0 <HAL_I2C_Init+0x1bc>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1e58      	subs	r0, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6859      	ldr	r1, [r3, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	440b      	add	r3, r1
 8001ae0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aee:	e00f      	b.n	8001b10 <HAL_I2C_Init+0x1dc>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1e58      	subs	r0, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	0099      	lsls	r1, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b06:	3301      	adds	r3, #1
 8001b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	6809      	ldr	r1, [r1, #0]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6911      	ldr	r1, [r2, #16]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68d2      	ldr	r2, [r2, #12]
 8001b4a:	4311      	orrs	r1, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	000186a0 	.word	0x000186a0
 8001bac:	001e847f 	.word	0x001e847f
 8001bb0:	003d08ff 	.word	0x003d08ff
 8001bb4:	431bde83 	.word	0x431bde83
 8001bb8:	10624dd3 	.word	0x10624dd3

08001bbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	460b      	mov	r3, r1
 8001bca:	817b      	strh	r3, [r7, #10]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff fb3e 	bl	8001250 <HAL_GetTick>
 8001bd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	f040 80e0 	bne.w	8001da4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2319      	movs	r3, #25
 8001bea:	2201      	movs	r2, #1
 8001bec:	4970      	ldr	r1, [pc, #448]	; (8001db0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fa92 	bl	8002118 <I2C_WaitOnFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e0d3      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_I2C_Master_Transmit+0x50>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e0cc      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d007      	beq.n	8001c32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2221      	movs	r2, #33	; 0x21
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	893a      	ldrh	r2, [r7, #8]
 8001c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c74:	8979      	ldrh	r1, [r7, #10]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	6a3a      	ldr	r2, [r7, #32]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f9ca 	bl	8002014 <I2C_MasterRequestWrite>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e08d      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ca0:	e066      	b.n	8001d70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fb50 	bl	800234c <I2C_WaitOnTXEFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00d      	beq.n	8001cce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d107      	bne.n	8001cca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e06b      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d11b      	bne.n	8001d44 <HAL_I2C_Master_Transmit+0x188>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d017      	beq.n	8001d44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	6a39      	ldr	r1, [r7, #32]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 fb47 	bl	80023dc <I2C_WaitOnBTFFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00d      	beq.n	8001d70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d107      	bne.n	8001d6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e01a      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d194      	bne.n	8001ca2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	00100002 	.word	0x00100002
 8001db4:	ffff0000 	.word	0xffff0000

08001db8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff fa42 	bl	8001250 <HAL_GetTick>
 8001dcc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	f040 8111 	bne.w	8002002 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2319      	movs	r3, #25
 8001de6:	2201      	movs	r2, #1
 8001de8:	4988      	ldr	r1, [pc, #544]	; (800200c <HAL_I2C_IsDeviceReady+0x254>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f994 	bl	8002118 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
 8001df8:	e104      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_I2C_IsDeviceReady+0x50>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e0fd      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d007      	beq.n	8001e2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2224      	movs	r2, #36	; 0x24
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4a70      	ldr	r2, [pc, #448]	; (8002010 <HAL_I2C_IsDeviceReady+0x258>)
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f952 	bl	8002118 <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00d      	beq.n	8001e96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e88:	d103      	bne.n	8001e92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e0b6      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ea4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f9d3 	bl	8001250 <HAL_GetTick>
 8001eaa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	bf0c      	ite	eq
 8001eba:	2301      	moveq	r3, #1
 8001ebc:	2300      	movne	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001eda:	e025      	b.n	8001f28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001edc:	f7ff f9b8 	bl	8001250 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d302      	bcc.n	8001ef2 <HAL_I2C_IsDeviceReady+0x13a>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	22a0      	movs	r2, #160	; 0xa0
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2ba0      	cmp	r3, #160	; 0xa0
 8001f32:	d005      	beq.n	8001f40 <HAL_I2C_IsDeviceReady+0x188>
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_I2C_IsDeviceReady+0x188>
 8001f3a:	7dbb      	ldrb	r3, [r7, #22]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0cd      	beq.n	8001edc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d129      	bne.n	8001faa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2319      	movs	r3, #25
 8001f82:	2201      	movs	r2, #1
 8001f84:	4921      	ldr	r1, [pc, #132]	; (800200c <HAL_I2C_IsDeviceReady+0x254>)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f8c6 	bl	8002118 <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e036      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e02c      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fc2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2319      	movs	r3, #25
 8001fca:	2201      	movs	r2, #1
 8001fcc:	490f      	ldr	r1, [pc, #60]	; (800200c <HAL_I2C_IsDeviceReady+0x254>)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f8a2 	bl	8002118 <I2C_WaitOnFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e012      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f4ff af32 	bcc.w	8001e52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002002:	2302      	movs	r3, #2
  }
}
 8002004:	4618      	mov	r0, r3
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	00100002 	.word	0x00100002
 8002010:	ffff0000 	.word	0xffff0000

08002014 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	460b      	mov	r3, r1
 8002022:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d006      	beq.n	800203e <I2C_MasterRequestWrite+0x2a>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d003      	beq.n	800203e <I2C_MasterRequestWrite+0x2a>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800203c:	d108      	bne.n	8002050 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e00b      	b.n	8002068 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	2b12      	cmp	r3, #18
 8002056:	d107      	bne.n	8002068 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002066:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f84f 	bl	8002118 <I2C_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00d      	beq.n	800209c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800208e:	d103      	bne.n	8002098 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e035      	b.n	8002108 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020a4:	d108      	bne.n	80020b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020a6:	897b      	ldrh	r3, [r7, #10]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020b4:	611a      	str	r2, [r3, #16]
 80020b6:	e01b      	b.n	80020f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020b8:	897b      	ldrh	r3, [r7, #10]
 80020ba:	11db      	asrs	r3, r3, #7
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f003 0306 	and.w	r3, r3, #6
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f063 030f 	orn	r3, r3, #15
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	490e      	ldr	r1, [pc, #56]	; (8002110 <I2C_MasterRequestWrite+0xfc>)
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f898 	bl	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e010      	b.n	8002108 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020e6:	897b      	ldrh	r3, [r7, #10]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4907      	ldr	r1, [pc, #28]	; (8002114 <I2C_MasterRequestWrite+0x100>)
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f888 	bl	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	00010008 	.word	0x00010008
 8002114:	00010002 	.word	0x00010002

08002118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002128:	e048      	b.n	80021bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d044      	beq.n	80021bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002132:	f7ff f88d 	bl	8001250 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d302      	bcc.n	8002148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d139      	bne.n	80021bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10d      	bne.n	800216e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	43da      	mvns	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4013      	ands	r3, r2
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	e00c      	b.n	8002188 <I2C_WaitOnFlagUntilTimeout+0x70>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	43da      	mvns	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4013      	ands	r3, r2
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	429a      	cmp	r2, r3
 800218c:	d116      	bne.n	80021bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f043 0220 	orr.w	r2, r3, #32
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e023      	b.n	8002204 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	0c1b      	lsrs	r3, r3, #16
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d10d      	bne.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	43da      	mvns	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4013      	ands	r3, r2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	e00c      	b.n	80021fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	43da      	mvns	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	4013      	ands	r3, r2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf0c      	ite	eq
 80021f4:	2301      	moveq	r3, #1
 80021f6:	2300      	movne	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d093      	beq.n	800212a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800221a:	e071      	b.n	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222a:	d123      	bne.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002244:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0204 	orr.w	r2, r3, #4
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e067      	b.n	8002344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227a:	d041      	beq.n	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227c:	f7fe ffe8 	bl	8001250 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	d302      	bcc.n	8002292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d136      	bne.n	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10c      	bne.n	80022b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4013      	ands	r3, r2
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	e00b      	b.n	80022ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	43da      	mvns	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	4013      	ands	r3, r2
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d016      	beq.n	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f043 0220 	orr.w	r2, r3, #32
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e021      	b.n	8002344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	0c1b      	lsrs	r3, r3, #16
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d10c      	bne.n	8002324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	43da      	mvns	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4013      	ands	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf14      	ite	ne
 800231c:	2301      	movne	r3, #1
 800231e:	2300      	moveq	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e00b      	b.n	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4013      	ands	r3, r2
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	f47f af6d 	bne.w	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002358:	e034      	b.n	80023c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f886 	bl	800246c <I2C_IsAcknowledgeFailed>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e034      	b.n	80023d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d028      	beq.n	80023c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002372:	f7fe ff6d 	bl	8001250 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	429a      	cmp	r2, r3
 8002380:	d302      	bcc.n	8002388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d11d      	bne.n	80023c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002392:	2b80      	cmp	r3, #128	; 0x80
 8002394:	d016      	beq.n	80023c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f043 0220 	orr.w	r2, r3, #32
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e007      	b.n	80023d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	2b80      	cmp	r3, #128	; 0x80
 80023d0:	d1c3      	bne.n	800235a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023e8:	e034      	b.n	8002454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f83e 	bl	800246c <I2C_IsAcknowledgeFailed>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e034      	b.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002400:	d028      	beq.n	8002454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002402:	f7fe ff25 	bl	8001250 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	429a      	cmp	r2, r3
 8002410:	d302      	bcc.n	8002418 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d11d      	bne.n	8002454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d016      	beq.n	8002454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e007      	b.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b04      	cmp	r3, #4
 8002460:	d1c3      	bne.n	80023ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002482:	d11b      	bne.n	80024bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800248c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f043 0204 	orr.w	r2, r3, #4
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e272      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8087 	beq.w	80025f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e8:	4b92      	ldr	r3, [pc, #584]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d00c      	beq.n	800250e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024f4:	4b8f      	ldr	r3, [pc, #572]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d112      	bne.n	8002526 <HAL_RCC_OscConfig+0x5e>
 8002500:	4b8c      	ldr	r3, [pc, #560]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d10b      	bne.n	8002526 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250e:	4b89      	ldr	r3, [pc, #548]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d06c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x12c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d168      	bne.n	80025f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e24c      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x76>
 8002530:	4b80      	ldr	r3, [pc, #512]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a7f      	ldr	r2, [pc, #508]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	e02e      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x98>
 8002546:	4b7b      	ldr	r3, [pc, #492]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a7a      	ldr	r2, [pc, #488]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b78      	ldr	r3, [pc, #480]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a77      	ldr	r2, [pc, #476]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e01d      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0xbc>
 800256a:	4b72      	ldr	r3, [pc, #456]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a71      	ldr	r2, [pc, #452]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 8002584:	4b6b      	ldr	r3, [pc, #428]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a6a      	ldr	r2, [pc, #424]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800258a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a67      	ldr	r2, [pc, #412]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7fe fe54 	bl	8001250 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ac:	f7fe fe50 	bl	8001250 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e200      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0xe4>
 80025ca:	e014      	b.n	80025f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe fe40 	bl	8001250 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7fe fe3c 	bl	8001250 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e1ec      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x10c>
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d063      	beq.n	80026ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002602:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800260e:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b08      	cmp	r3, #8
 8002618:	d11c      	bne.n	8002654 <HAL_RCC_OscConfig+0x18c>
 800261a:	4b46      	ldr	r3, [pc, #280]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d116      	bne.n	8002654 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x176>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e1c0      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4939      	ldr	r1, [pc, #228]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	e03a      	b.n	80026ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_RCC_OscConfig+0x270>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7fe fdf5 	bl	8001250 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266a:	f7fe fdf1 	bl	8001250 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1a1      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4927      	ldr	r1, [pc, #156]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]
 800269c:	e015      	b.n	80026ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <HAL_RCC_OscConfig+0x270>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fdd4 	bl	8001250 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ac:	f7fe fdd0 	bl	8001250 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e180      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d03a      	beq.n	800274c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d019      	beq.n	8002712 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_RCC_OscConfig+0x274>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7fe fdb4 	bl	8001250 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ec:	f7fe fdb0 	bl	8001250 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e160      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800270a:	2001      	movs	r0, #1
 800270c:	f000 face 	bl	8002cac <RCC_Delay>
 8002710:	e01c      	b.n	800274c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002718:	f7fe fd9a 	bl	8001250 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271e:	e00f      	b.n	8002740 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002720:	f7fe fd96 	bl	8001250 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d908      	bls.n	8002740 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e146      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	42420000 	.word	0x42420000
 800273c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	4b92      	ldr	r3, [pc, #584]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e9      	bne.n	8002720 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a6 	beq.w	80028a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4b8b      	ldr	r3, [pc, #556]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10d      	bne.n	8002786 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	4b88      	ldr	r3, [pc, #544]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4a87      	ldr	r2, [pc, #540]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002774:	61d3      	str	r3, [r2, #28]
 8002776:	4b85      	ldr	r3, [pc, #532]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002782:	2301      	movs	r3, #1
 8002784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002786:	4b82      	ldr	r3, [pc, #520]	; (8002990 <HAL_RCC_OscConfig+0x4c8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d118      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002792:	4b7f      	ldr	r3, [pc, #508]	; (8002990 <HAL_RCC_OscConfig+0x4c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7e      	ldr	r2, [pc, #504]	; (8002990 <HAL_RCC_OscConfig+0x4c8>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279e:	f7fe fd57 	bl	8001250 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a6:	f7fe fd53 	bl	8001250 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b64      	cmp	r3, #100	; 0x64
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e103      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	4b75      	ldr	r3, [pc, #468]	; (8002990 <HAL_RCC_OscConfig+0x4c8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x312>
 80027cc:	4b6f      	ldr	r3, [pc, #444]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4a6e      	ldr	r2, [pc, #440]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	e02d      	b.n	8002836 <HAL_RCC_OscConfig+0x36e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x334>
 80027e2:	4b6a      	ldr	r3, [pc, #424]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a69      	ldr	r2, [pc, #420]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	6213      	str	r3, [r2, #32]
 80027ee:	4b67      	ldr	r3, [pc, #412]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a66      	ldr	r2, [pc, #408]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	e01c      	b.n	8002836 <HAL_RCC_OscConfig+0x36e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b05      	cmp	r3, #5
 8002802:	d10c      	bne.n	800281e <HAL_RCC_OscConfig+0x356>
 8002804:	4b61      	ldr	r3, [pc, #388]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4a60      	ldr	r2, [pc, #384]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 800280a:	f043 0304 	orr.w	r3, r3, #4
 800280e:	6213      	str	r3, [r2, #32]
 8002810:	4b5e      	ldr	r3, [pc, #376]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a5d      	ldr	r2, [pc, #372]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	e00b      	b.n	8002836 <HAL_RCC_OscConfig+0x36e>
 800281e:	4b5b      	ldr	r3, [pc, #364]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a5a      	ldr	r2, [pc, #360]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6213      	str	r3, [r2, #32]
 800282a:	4b58      	ldr	r3, [pc, #352]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4a57      	ldr	r2, [pc, #348]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002830:	f023 0304 	bic.w	r3, r3, #4
 8002834:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d015      	beq.n	800286a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fe fd07 	bl	8001250 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe fd03 	bl	8001250 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e0b1      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	4b4b      	ldr	r3, [pc, #300]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ee      	beq.n	8002846 <HAL_RCC_OscConfig+0x37e>
 8002868:	e014      	b.n	8002894 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286a:	f7fe fcf1 	bl	8001250 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fced 	bl	8001250 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e09b      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002888:	4b40      	ldr	r3, [pc, #256]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ee      	bne.n	8002872 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d105      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289a:	4b3c      	ldr	r3, [pc, #240]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	4a3b      	ldr	r2, [pc, #236]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8087 	beq.w	80029be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b0:	4b36      	ldr	r3, [pc, #216]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d061      	beq.n	8002980 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d146      	bne.n	8002952 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c4:	4b33      	ldr	r3, [pc, #204]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe fcc1 	bl	8001250 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d2:	f7fe fcbd 	bl	8001250 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e06d      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e4:	4b29      	ldr	r3, [pc, #164]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d108      	bne.n	800290c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028fa:	4b24      	ldr	r3, [pc, #144]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	4921      	ldr	r1, [pc, #132]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290c:	4b1f      	ldr	r3, [pc, #124]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a19      	ldr	r1, [r3, #32]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	430b      	orrs	r3, r1
 800291e:	491b      	ldr	r1, [pc, #108]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe fc91 	bl	8001250 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7fe fc8d 	bl	8001250 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e03d      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x46a>
 8002950:	e035      	b.n	80029be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe fc7a 	bl	8001250 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fc76 	bl	8001250 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e026      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_OscConfig+0x4c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x498>
 800297e:	e01e      	b.n	80029be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d107      	bne.n	8002998 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e019      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
 8002994:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_OscConfig+0x500>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d001      	beq.n	80029be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000

080029cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0d0      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d910      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b67      	ldr	r3, [pc, #412]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	4965      	ldr	r1, [pc, #404]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b63      	ldr	r3, [pc, #396]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0b8      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d020      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a28:	4b59      	ldr	r3, [pc, #356]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a58      	ldr	r2, [pc, #352]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a40:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a52      	ldr	r2, [pc, #328]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a4c:	4b50      	ldr	r3, [pc, #320]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	494d      	ldr	r1, [pc, #308]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d040      	beq.n	8002aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d107      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d115      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e07f      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e073      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e06b      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b39      	ldr	r3, [pc, #228]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4936      	ldr	r1, [pc, #216]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002abc:	f7fe fbc8 	bl	8001250 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fe fbc4 	bl	8001250 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e053      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aec:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d210      	bcs.n	8002b1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 0207 	bic.w	r2, r3, #7
 8002b02:	4922      	ldr	r1, [pc, #136]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e032      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4916      	ldr	r1, [pc, #88]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	490e      	ldr	r1, [pc, #56]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b5a:	f000 f821 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	490a      	ldr	r1, [pc, #40]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6c:	5ccb      	ldrb	r3, [r1, r3]
 8002b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b72:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1cc>)
 8002b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCC_ClockConfig+0x1d0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe fb26 	bl	80011cc <HAL_InitTick>

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40022000 	.word	0x40022000
 8002b90:	40021000 	.word	0x40021000
 8002b94:	080052e4 	.word	0x080052e4
 8002b98:	20000008 	.word	0x20000008
 8002b9c:	2000000c 	.word	0x2000000c

08002ba0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bba:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x30>
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x36>
 8002bce:	e027      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd2:	613b      	str	r3, [r7, #16]
      break;
 8002bd4:	e027      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	0c9b      	lsrs	r3, r3, #18
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d010      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	0c5b      	lsrs	r3, r3, #17
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	4a11      	ldr	r2, [pc, #68]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bfa:	5cd3      	ldrb	r3, [r2, r3]
 8002bfc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c02:	fb03 f202 	mul.w	r2, r3, r2
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	e004      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c14:	fb02 f303 	mul.w	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	613b      	str	r3, [r7, #16]
      break;
 8002c1e:	e002      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c22:	613b      	str	r3, [r7, #16]
      break;
 8002c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c26:	693b      	ldr	r3, [r7, #16]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	007a1200 	.word	0x007a1200
 8002c3c:	080052fc 	.word	0x080052fc
 8002c40:	0800530c 	.word	0x0800530c
 8002c44:	003d0900 	.word	0x003d0900

08002c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c4c:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	20000008 	.word	0x20000008

08002c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c60:	f7ff fff2 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4903      	ldr	r1, [pc, #12]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c72:	5ccb      	ldrb	r3, [r1, r3]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	080052f4 	.word	0x080052f4

08002c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c88:	f7ff ffde 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	0adb      	lsrs	r3, r3, #11
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	080052f4 	.word	0x080052f4

08002cac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <RCC_Delay+0x34>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <RCC_Delay+0x38>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	0a5b      	lsrs	r3, r3, #9
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cc8:	bf00      	nop
  }
  while (Delay --);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1e5a      	subs	r2, r3, #1
 8002cce:	60fa      	str	r2, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f9      	bne.n	8002cc8 <RCC_Delay+0x1c>
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	20000008 	.word	0x20000008
 8002ce4:	10624dd3 	.word	0x10624dd3

08002ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e041      	b.n	8002d7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe f914 	bl	8000f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f000 fab2 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e041      	b.n	8002e1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d106      	bne.n	8002db2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f839 	bl	8002e24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	f000 fa63 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_TIM_PWM_Start+0x24>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e022      	b.n	8002ea2 <HAL_TIM_PWM_Start+0x6a>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d109      	bne.n	8002e76 <HAL_TIM_PWM_Start+0x3e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	e015      	b.n	8002ea2 <HAL_TIM_PWM_Start+0x6a>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d109      	bne.n	8002e90 <HAL_TIM_PWM_Start+0x58>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e008      	b.n	8002ea2 <HAL_TIM_PWM_Start+0x6a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e05e      	b.n	8002f68 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_PWM_Start+0x82>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb8:	e013      	b.n	8002ee2 <HAL_TIM_PWM_Start+0xaa>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_PWM_Start+0x92>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec8:	e00b      	b.n	8002ee2 <HAL_TIM_PWM_Start+0xaa>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Start+0xa2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed8:	e003      	b.n	8002ee2 <HAL_TIM_PWM_Start+0xaa>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fc50 	bl	8003790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <HAL_TIM_PWM_Start+0x138>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d107      	bne.n	8002f0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_TIM_PWM_Start+0x138>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00e      	beq.n	8002f32 <HAL_TIM_PWM_Start+0xfa>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d009      	beq.n	8002f32 <HAL_TIM_PWM_Start+0xfa>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <HAL_TIM_PWM_Start+0x13c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d004      	beq.n	8002f32 <HAL_TIM_PWM_Start+0xfa>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <HAL_TIM_PWM_Start+0x140>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d111      	bne.n	8002f56 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d010      	beq.n	8002f66 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	e007      	b.n	8002f66 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800

08002f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e0ae      	b.n	80030f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b0c      	cmp	r3, #12
 8002fa6:	f200 809f 	bhi.w	80030e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002faa:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	080030e9 	.word	0x080030e9
 8002fb8:	080030e9 	.word	0x080030e9
 8002fbc:	080030e9 	.word	0x080030e9
 8002fc0:	08003025 	.word	0x08003025
 8002fc4:	080030e9 	.word	0x080030e9
 8002fc8:	080030e9 	.word	0x080030e9
 8002fcc:	080030e9 	.word	0x080030e9
 8002fd0:	08003067 	.word	0x08003067
 8002fd4:	080030e9 	.word	0x080030e9
 8002fd8:	080030e9 	.word	0x080030e9
 8002fdc:	080030e9 	.word	0x080030e9
 8002fe0:	080030a7 	.word	0x080030a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f9b2 	bl	8003354 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0208 	orr.w	r2, r2, #8
 8002ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0204 	bic.w	r2, r2, #4
 800300e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	619a      	str	r2, [r3, #24]
      break;
 8003022:	e064      	b.n	80030ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f9f8 	bl	8003420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6999      	ldr	r1, [r3, #24]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	021a      	lsls	r2, r3, #8
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	619a      	str	r2, [r3, #24]
      break;
 8003064:	e043      	b.n	80030ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fa41 	bl	80034f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0208 	orr.w	r2, r2, #8
 8003080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0204 	bic.w	r2, r2, #4
 8003090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	61da      	str	r2, [r3, #28]
      break;
 80030a4:	e023      	b.n	80030ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fa8b 	bl	80035c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69da      	ldr	r2, [r3, #28]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69da      	ldr	r2, [r3, #28]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69d9      	ldr	r1, [r3, #28]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	021a      	lsls	r2, r3, #8
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	61da      	str	r2, [r3, #28]
      break;
 80030e6:	e002      	b.n	80030ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	75fb      	strb	r3, [r7, #23]
      break;
 80030ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_TIM_ConfigClockSource+0x1c>
 8003118:	2302      	movs	r3, #2
 800311a:	e0b4      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x186>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800313a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003154:	d03e      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315a:	f200 8087 	bhi.w	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800315e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003162:	f000 8086 	beq.w	8003272 <HAL_TIM_ConfigClockSource+0x172>
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316a:	d87f      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800316c:	2b70      	cmp	r3, #112	; 0x70
 800316e:	d01a      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003170:	2b70      	cmp	r3, #112	; 0x70
 8003172:	d87b      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 8003174:	2b60      	cmp	r3, #96	; 0x60
 8003176:	d050      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x11a>
 8003178:	2b60      	cmp	r3, #96	; 0x60
 800317a:	d877      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800317c:	2b50      	cmp	r3, #80	; 0x50
 800317e:	d03c      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0xfa>
 8003180:	2b50      	cmp	r3, #80	; 0x50
 8003182:	d873      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d058      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x13a>
 8003188:	2b40      	cmp	r3, #64	; 0x40
 800318a:	d86f      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800318c:	2b30      	cmp	r3, #48	; 0x30
 800318e:	d064      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 8003190:	2b30      	cmp	r3, #48	; 0x30
 8003192:	d86b      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b20      	cmp	r3, #32
 8003196:	d060      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 8003198:	2b20      	cmp	r3, #32
 800319a:	d867      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d05c      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d05a      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 80031a4:	e062      	b.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031b6:	f000 facc 	bl	8003752 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	609a      	str	r2, [r3, #8]
      break;
 80031d2:	e04f      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031e4:	f000 fab5 	bl	8003752 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f6:	609a      	str	r2, [r3, #8]
      break;
 80031f8:	e03c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003206:	461a      	mov	r2, r3
 8003208:	f000 fa2c 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2150      	movs	r1, #80	; 0x50
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fa83 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 8003218:	e02c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003226:	461a      	mov	r2, r3
 8003228:	f000 fa4a 	bl	80036c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2160      	movs	r1, #96	; 0x60
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fa73 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 8003238:	e01c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003246:	461a      	mov	r2, r3
 8003248:	f000 fa0c 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fa63 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 8003258:	e00c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4619      	mov	r1, r3
 8003264:	4610      	mov	r0, r2
 8003266:	f000 fa5a 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 800326a:	e003      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      break;
 8003270:	e000      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a29      	ldr	r2, [pc, #164]	; (8003348 <TIM_Base_SetConfig+0xb8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00b      	beq.n	80032c0 <TIM_Base_SetConfig+0x30>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d007      	beq.n	80032c0 <TIM_Base_SetConfig+0x30>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a26      	ldr	r2, [pc, #152]	; (800334c <TIM_Base_SetConfig+0xbc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <TIM_Base_SetConfig+0x30>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a25      	ldr	r2, [pc, #148]	; (8003350 <TIM_Base_SetConfig+0xc0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d108      	bne.n	80032d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <TIM_Base_SetConfig+0xb8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_Base_SetConfig+0x62>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e0:	d007      	beq.n	80032f2 <TIM_Base_SetConfig+0x62>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a19      	ldr	r2, [pc, #100]	; (800334c <TIM_Base_SetConfig+0xbc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0x62>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a18      	ldr	r2, [pc, #96]	; (8003350 <TIM_Base_SetConfig+0xc0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a07      	ldr	r2, [pc, #28]	; (8003348 <TIM_Base_SetConfig+0xb8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d103      	bne.n	8003338 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	615a      	str	r2, [r3, #20]
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800

08003354 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f023 0201 	bic.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f023 0302 	bic.w	r3, r3, #2
 800339c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a1c      	ldr	r2, [pc, #112]	; (800341c <TIM_OC1_SetConfig+0xc8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d10c      	bne.n	80033ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f023 0308 	bic.w	r3, r3, #8
 80033b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f023 0304 	bic.w	r3, r3, #4
 80033c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a13      	ldr	r2, [pc, #76]	; (800341c <TIM_OC1_SetConfig+0xc8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d111      	bne.n	80033f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	621a      	str	r2, [r3, #32]
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40012c00 	.word	0x40012c00

08003420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 0210 	bic.w	r2, r3, #16
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0320 	bic.w	r3, r3, #32
 800346a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <TIM_OC2_SetConfig+0xd0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d10d      	bne.n	800349c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <TIM_OC2_SetConfig+0xd0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d113      	bne.n	80034cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	40012c00 	.word	0x40012c00

080034f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800353c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <TIM_OC3_SetConfig+0xd0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10d      	bne.n	800356e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800356c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <TIM_OC3_SetConfig+0xd0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d113      	bne.n	800359e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800357c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	621a      	str	r2, [r3, #32]
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40012c00 	.word	0x40012c00

080035c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	031b      	lsls	r3, r3, #12
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a0f      	ldr	r2, [pc, #60]	; (8003660 <TIM_OC4_SetConfig+0x98>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d109      	bne.n	800363c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800362e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	019b      	lsls	r3, r3, #6
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	40012c00 	.word	0x40012c00

08003664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800368e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f023 030a 	bic.w	r3, r3, #10
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f023 0210 	bic.w	r2, r3, #16
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	031b      	lsls	r3, r3, #12
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	621a      	str	r2, [r3, #32]
}
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	f043 0307 	orr.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	609a      	str	r2, [r3, #8]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003752:	b480      	push	{r7}
 8003754:	b087      	sub	sp, #28
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800376c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	021a      	lsls	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	431a      	orrs	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	609a      	str	r2, [r3, #8]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2201      	movs	r2, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	401a      	ands	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	fa01 f303 	lsl.w	r3, r1, r3
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e046      	b.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a16      	ldr	r2, [pc, #88]	; (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383c:	d009      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a12      	ldr	r2, [pc, #72]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a10      	ldr	r2, [pc, #64]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d10c      	bne.n	800386c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	4313      	orrs	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800

08003894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e042      	b.n	800392c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fbbe 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2224      	movs	r2, #36	; 0x24
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fcd5 	bl	8004288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800390c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	4613      	mov	r3, r2
 8003940:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b20      	cmp	r3, #32
 800394c:	d112      	bne.n	8003974 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_UART_Receive_IT+0x26>
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e00b      	b.n	8003976 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	461a      	mov	r2, r3
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fab7 	bl	8003ede <UART_Start_Receive_IT>
 8003970:	4603      	mov	r3, r0
 8003972:	e000      	b.n	8003976 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b0ba      	sub	sp, #232	; 0xe8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10f      	bne.n	80039e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_UART_IRQHandler+0x66>
 80039d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fb93 	bl	800410a <UART_Receive_IT>
      return;
 80039e4:	e25b      	b.n	8003e9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80de 	beq.w	8003bac <HAL_UART_IRQHandler+0x22c>
 80039f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80d1 	beq.w	8003bac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_UART_IRQHandler+0xae>
 8003a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_UART_IRQHandler+0xd2>
 8003a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f043 0202 	orr.w	r2, r3, #2
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_UART_IRQHandler+0xf6>
 8003a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f043 0204 	orr.w	r2, r3, #4
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d011      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x126>
 8003a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d105      	bne.n	8003a9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f043 0208 	orr.w	r2, r3, #8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 81f2 	beq.w	8003e94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_UART_IRQHandler+0x14e>
 8003abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fb1e 	bl	800410a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf14      	ite	ne
 8003adc:	2301      	movne	r3, #1
 8003ade:	2300      	moveq	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <HAL_UART_IRQHandler+0x17a>
 8003af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d04f      	beq.n	8003b9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fa28 	bl	8003f50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d041      	beq.n	8003b92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3314      	adds	r3, #20
 8003b36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1d9      	bne.n	8003b0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d013      	beq.n	8003b8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	4a7e      	ldr	r2, [pc, #504]	; (8003d60 <HAL_UART_IRQHandler+0x3e0>)
 8003b68:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd fce4 	bl	800153c <HAL_DMA_Abort_IT>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b84:	4610      	mov	r0, r2
 8003b86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b88:	e00e      	b.n	8003ba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f993 	bl	8003eb6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b90:	e00a      	b.n	8003ba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f98f 	bl	8003eb6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	e006      	b.n	8003ba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f98b 	bl	8003eb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ba6:	e175      	b.n	8003e94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	bf00      	nop
    return;
 8003baa:	e173      	b.n	8003e94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	f040 814f 	bne.w	8003e54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8148 	beq.w	8003e54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8141 	beq.w	8003e54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80b6 	beq.w	8003d64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8145 	beq.w	8003e98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c16:	429a      	cmp	r2, r3
 8003c18:	f080 813e 	bcs.w	8003e98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	f000 8088 	beq.w	8003d40 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c5c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1d9      	bne.n	8003c30 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3314      	adds	r3, #20
 8003c9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ca0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ca4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ca8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e1      	bne.n	8003c7c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3314      	adds	r3, #20
 8003cd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cdc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ce2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e3      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d10:	f023 0310 	bic.w	r3, r3, #16
 8003d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d22:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d24:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e3      	bne.n	8003cfe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd fbc3 	bl	80014c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f8b6 	bl	8003ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d5c:	e09c      	b.n	8003e98 <HAL_UART_IRQHandler+0x518>
 8003d5e:	bf00      	nop
 8003d60:	08004015 	.word	0x08004015
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 808e 	beq.w	8003e9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8089 	beq.w	8003e9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dae:	647a      	str	r2, [r7, #68]	; 0x44
 8003db0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e3      	bne.n	8003d8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3314      	adds	r3, #20
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003de6:	633a      	str	r2, [r7, #48]	; 0x30
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e3      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0310 	bic.w	r3, r3, #16
 8003e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e2c:	61fa      	str	r2, [r7, #28]
 8003e2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	69b9      	ldr	r1, [r7, #24]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	617b      	str	r3, [r7, #20]
   return(result);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e3      	bne.n	8003e08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f83b 	bl	8003ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e52:	e023      	b.n	8003e9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_UART_IRQHandler+0x4f4>
 8003e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f8e5 	bl	800403c <UART_Transmit_IT>
    return;
 8003e72:	e014      	b.n	8003e9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00e      	beq.n	8003e9e <HAL_UART_IRQHandler+0x51e>
 8003e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f924 	bl	80040da <UART_EndTransmit_IT>
    return;
 8003e92:	e004      	b.n	8003e9e <HAL_UART_IRQHandler+0x51e>
    return;
 8003e94:	bf00      	nop
 8003e96:	e002      	b.n	8003e9e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e98:	bf00      	nop
 8003e9a:	e000      	b.n	8003e9e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e9c:	bf00      	nop
  }
}
 8003e9e:	37e8      	adds	r7, #232	; 0xe8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	88fa      	ldrh	r2, [r7, #6]
 8003ef6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2222      	movs	r2, #34	; 0x22
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0220 	orr.w	r2, r2, #32
 8003f42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b095      	sub	sp, #84	; 0x54
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f78:	643a      	str	r2, [r7, #64]	; 0x40
 8003f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3314      	adds	r3, #20
 8003f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3314      	adds	r3, #20
 8003faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e5      	bne.n	8003f8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d119      	bne.n	8003ffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f023 0310 	bic.w	r3, r3, #16
 8003fde:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fe8:	61ba      	str	r2, [r7, #24]
 8003fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6979      	ldr	r1, [r7, #20]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e5      	bne.n	8003fc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
}
 800400a:	bf00      	nop
 800400c:	3754      	adds	r7, #84	; 0x54
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f7ff ff41 	bl	8003eb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004034:	bf00      	nop
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b21      	cmp	r3, #33	; 0x21
 800404e:	d13e      	bne.n	80040ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004058:	d114      	bne.n	8004084 <UART_Transmit_IT+0x48>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d110      	bne.n	8004084 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004076:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	621a      	str	r2, [r3, #32]
 8004082:	e008      	b.n	8004096 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	1c59      	adds	r1, r3, #1
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6211      	str	r1, [r2, #32]
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29b      	uxth	r3, r3
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4619      	mov	r1, r3
 80040a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10f      	bne.n	80040ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
  }
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fed2 	bl	8003ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b08c      	sub	sp, #48	; 0x30
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b22      	cmp	r3, #34	; 0x22
 800411c:	f040 80ae 	bne.w	800427c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004128:	d117      	bne.n	800415a <UART_Receive_IT+0x50>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d113      	bne.n	800415a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004148:	b29a      	uxth	r2, r3
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	1c9a      	adds	r2, r3, #2
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
 8004158:	e026      	b.n	80041a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416c:	d007      	beq.n	800417e <UART_Receive_IT+0x74>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <UART_Receive_IT+0x82>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	701a      	strb	r2, [r3, #0]
 800418a:	e008      	b.n	800419e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004198:	b2da      	uxtb	r2, r3
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4619      	mov	r1, r3
 80041b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d15d      	bne.n	8004278 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0220 	bic.w	r2, r2, #32
 80041ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d135      	bne.n	800426e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	613b      	str	r3, [r7, #16]
   return(result);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f023 0310 	bic.w	r3, r3, #16
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004228:	623a      	str	r2, [r7, #32]
 800422a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	69f9      	ldr	r1, [r7, #28]
 800422e:	6a3a      	ldr	r2, [r7, #32]
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	61bb      	str	r3, [r7, #24]
   return(result);
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e5      	bne.n	8004208 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b10      	cmp	r3, #16
 8004248:	d10a      	bne.n	8004260 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fe2e 	bl	8003ec8 <HAL_UARTEx_RxEventCallback>
 800426c:	e002      	b.n	8004274 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc fb0a 	bl	8000888 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	e002      	b.n	800427e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3730      	adds	r7, #48	; 0x30
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042c2:	f023 030c 	bic.w	r3, r3, #12
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	430b      	orrs	r3, r1
 80042ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2c      	ldr	r2, [pc, #176]	; (800439c <UART_SetConfig+0x114>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042f0:	f7fe fcc8 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	e002      	b.n	80042fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7fe fcb0 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 80042fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009a      	lsls	r2, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <UART_SetConfig+0x118>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	0119      	lsls	r1, r3, #4
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009a      	lsls	r2, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	fbb2 f2f3 	udiv	r2, r2, r3
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <UART_SetConfig+0x118>)
 8004336:	fba3 0302 	umull	r0, r3, r3, r2
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2064      	movs	r0, #100	; 0x64
 800433e:	fb00 f303 	mul.w	r3, r0, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	3332      	adds	r3, #50	; 0x32
 8004348:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <UART_SetConfig+0x118>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004354:	4419      	add	r1, r3
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009a      	lsls	r2, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	fbb2 f2f3 	udiv	r2, r2, r3
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <UART_SetConfig+0x118>)
 800436e:	fba3 0302 	umull	r0, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2064      	movs	r0, #100	; 0x64
 8004376:	fb00 f303 	mul.w	r3, r0, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	3332      	adds	r3, #50	; 0x32
 8004380:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <UART_SetConfig+0x118>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	440a      	add	r2, r1
 8004392:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40013800 	.word	0x40013800
 80043a0:	51eb851f 	.word	0x51eb851f

080043a4 <atoi>:
 80043a4:	220a      	movs	r2, #10
 80043a6:	2100      	movs	r1, #0
 80043a8:	f000 b87e 	b.w	80044a8 <strtol>

080043ac <_strtol_l.constprop.0>:
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b2:	4686      	mov	lr, r0
 80043b4:	4690      	mov	r8, r2
 80043b6:	d001      	beq.n	80043bc <_strtol_l.constprop.0+0x10>
 80043b8:	2b24      	cmp	r3, #36	; 0x24
 80043ba:	d906      	bls.n	80043ca <_strtol_l.constprop.0+0x1e>
 80043bc:	f000 f886 	bl	80044cc <__errno>
 80043c0:	2316      	movs	r3, #22
 80043c2:	6003      	str	r3, [r0, #0]
 80043c4:	2000      	movs	r0, #0
 80043c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ca:	460d      	mov	r5, r1
 80043cc:	4835      	ldr	r0, [pc, #212]	; (80044a4 <_strtol_l.constprop.0+0xf8>)
 80043ce:	462a      	mov	r2, r5
 80043d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043d4:	5d06      	ldrb	r6, [r0, r4]
 80043d6:	f016 0608 	ands.w	r6, r6, #8
 80043da:	d1f8      	bne.n	80043ce <_strtol_l.constprop.0+0x22>
 80043dc:	2c2d      	cmp	r4, #45	; 0x2d
 80043de:	d12e      	bne.n	800443e <_strtol_l.constprop.0+0x92>
 80043e0:	2601      	movs	r6, #1
 80043e2:	782c      	ldrb	r4, [r5, #0]
 80043e4:	1c95      	adds	r5, r2, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d057      	beq.n	800449a <_strtol_l.constprop.0+0xee>
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d109      	bne.n	8004402 <_strtol_l.constprop.0+0x56>
 80043ee:	2c30      	cmp	r4, #48	; 0x30
 80043f0:	d107      	bne.n	8004402 <_strtol_l.constprop.0+0x56>
 80043f2:	782a      	ldrb	r2, [r5, #0]
 80043f4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80043f8:	2a58      	cmp	r2, #88	; 0x58
 80043fa:	d149      	bne.n	8004490 <_strtol_l.constprop.0+0xe4>
 80043fc:	2310      	movs	r3, #16
 80043fe:	786c      	ldrb	r4, [r5, #1]
 8004400:	3502      	adds	r5, #2
 8004402:	2200      	movs	r2, #0
 8004404:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004408:	f10c 3cff 	add.w	ip, ip, #4294967295
 800440c:	fbbc f9f3 	udiv	r9, ip, r3
 8004410:	4610      	mov	r0, r2
 8004412:	fb03 ca19 	mls	sl, r3, r9, ip
 8004416:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800441a:	2f09      	cmp	r7, #9
 800441c:	d814      	bhi.n	8004448 <_strtol_l.constprop.0+0x9c>
 800441e:	463c      	mov	r4, r7
 8004420:	42a3      	cmp	r3, r4
 8004422:	dd20      	ble.n	8004466 <_strtol_l.constprop.0+0xba>
 8004424:	1c57      	adds	r7, r2, #1
 8004426:	d007      	beq.n	8004438 <_strtol_l.constprop.0+0x8c>
 8004428:	4581      	cmp	r9, r0
 800442a:	d319      	bcc.n	8004460 <_strtol_l.constprop.0+0xb4>
 800442c:	d101      	bne.n	8004432 <_strtol_l.constprop.0+0x86>
 800442e:	45a2      	cmp	sl, r4
 8004430:	db16      	blt.n	8004460 <_strtol_l.constprop.0+0xb4>
 8004432:	2201      	movs	r2, #1
 8004434:	fb00 4003 	mla	r0, r0, r3, r4
 8004438:	f815 4b01 	ldrb.w	r4, [r5], #1
 800443c:	e7eb      	b.n	8004416 <_strtol_l.constprop.0+0x6a>
 800443e:	2c2b      	cmp	r4, #43	; 0x2b
 8004440:	bf04      	itt	eq
 8004442:	782c      	ldrbeq	r4, [r5, #0]
 8004444:	1c95      	addeq	r5, r2, #2
 8004446:	e7ce      	b.n	80043e6 <_strtol_l.constprop.0+0x3a>
 8004448:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800444c:	2f19      	cmp	r7, #25
 800444e:	d801      	bhi.n	8004454 <_strtol_l.constprop.0+0xa8>
 8004450:	3c37      	subs	r4, #55	; 0x37
 8004452:	e7e5      	b.n	8004420 <_strtol_l.constprop.0+0x74>
 8004454:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004458:	2f19      	cmp	r7, #25
 800445a:	d804      	bhi.n	8004466 <_strtol_l.constprop.0+0xba>
 800445c:	3c57      	subs	r4, #87	; 0x57
 800445e:	e7df      	b.n	8004420 <_strtol_l.constprop.0+0x74>
 8004460:	f04f 32ff 	mov.w	r2, #4294967295
 8004464:	e7e8      	b.n	8004438 <_strtol_l.constprop.0+0x8c>
 8004466:	1c53      	adds	r3, r2, #1
 8004468:	d108      	bne.n	800447c <_strtol_l.constprop.0+0xd0>
 800446a:	2322      	movs	r3, #34	; 0x22
 800446c:	4660      	mov	r0, ip
 800446e:	f8ce 3000 	str.w	r3, [lr]
 8004472:	f1b8 0f00 	cmp.w	r8, #0
 8004476:	d0a6      	beq.n	80043c6 <_strtol_l.constprop.0+0x1a>
 8004478:	1e69      	subs	r1, r5, #1
 800447a:	e006      	b.n	800448a <_strtol_l.constprop.0+0xde>
 800447c:	b106      	cbz	r6, 8004480 <_strtol_l.constprop.0+0xd4>
 800447e:	4240      	negs	r0, r0
 8004480:	f1b8 0f00 	cmp.w	r8, #0
 8004484:	d09f      	beq.n	80043c6 <_strtol_l.constprop.0+0x1a>
 8004486:	2a00      	cmp	r2, #0
 8004488:	d1f6      	bne.n	8004478 <_strtol_l.constprop.0+0xcc>
 800448a:	f8c8 1000 	str.w	r1, [r8]
 800448e:	e79a      	b.n	80043c6 <_strtol_l.constprop.0+0x1a>
 8004490:	2430      	movs	r4, #48	; 0x30
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1b5      	bne.n	8004402 <_strtol_l.constprop.0+0x56>
 8004496:	2308      	movs	r3, #8
 8004498:	e7b3      	b.n	8004402 <_strtol_l.constprop.0+0x56>
 800449a:	2c30      	cmp	r4, #48	; 0x30
 800449c:	d0a9      	beq.n	80043f2 <_strtol_l.constprop.0+0x46>
 800449e:	230a      	movs	r3, #10
 80044a0:	e7af      	b.n	8004402 <_strtol_l.constprop.0+0x56>
 80044a2:	bf00      	nop
 80044a4:	0800530f 	.word	0x0800530f

080044a8 <strtol>:
 80044a8:	4613      	mov	r3, r2
 80044aa:	460a      	mov	r2, r1
 80044ac:	4601      	mov	r1, r0
 80044ae:	4802      	ldr	r0, [pc, #8]	; (80044b8 <strtol+0x10>)
 80044b0:	6800      	ldr	r0, [r0, #0]
 80044b2:	f7ff bf7b 	b.w	80043ac <_strtol_l.constprop.0>
 80044b6:	bf00      	nop
 80044b8:	20000060 	.word	0x20000060

080044bc <memset>:
 80044bc:	4603      	mov	r3, r0
 80044be:	4402      	add	r2, r0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <__errno>:
 80044cc:	4b01      	ldr	r3, [pc, #4]	; (80044d4 <__errno+0x8>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000060 	.word	0x20000060

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	2600      	movs	r6, #0
 80044dc:	4d0c      	ldr	r5, [pc, #48]	; (8004510 <__libc_init_array+0x38>)
 80044de:	4c0d      	ldr	r4, [pc, #52]	; (8004514 <__libc_init_array+0x3c>)
 80044e0:	1b64      	subs	r4, r4, r5
 80044e2:	10a4      	asrs	r4, r4, #2
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	f000 f828 	bl	800453c <_init>
 80044ec:	2600      	movs	r6, #0
 80044ee:	4d0a      	ldr	r5, [pc, #40]	; (8004518 <__libc_init_array+0x40>)
 80044f0:	4c0a      	ldr	r4, [pc, #40]	; (800451c <__libc_init_array+0x44>)
 80044f2:	1b64      	subs	r4, r4, r5
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	f855 3b04 	ldr.w	r3, [r5], #4
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	08005410 	.word	0x08005410
 8004514:	08005410 	.word	0x08005410
 8004518:	08005410 	.word	0x08005410
 800451c:	08005414 	.word	0x08005414

08004520 <memcpy>:
 8004520:	440a      	add	r2, r1
 8004522:	4291      	cmp	r1, r2
 8004524:	f100 33ff 	add.w	r3, r0, #4294967295
 8004528:	d100      	bne.n	800452c <memcpy+0xc>
 800452a:	4770      	bx	lr
 800452c:	b510      	push	{r4, lr}
 800452e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004532:	4291      	cmp	r1, r2
 8004534:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004538:	d1f9      	bne.n	800452e <memcpy+0xe>
 800453a:	bd10      	pop	{r4, pc}

0800453c <_init>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr

08004548 <_fini>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr
