
Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004028  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fbc  08004fbc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08004fbc  08004fbc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fbc  08004fbc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  20000064  08005028  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  08005028  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6da  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000228b  00000000  00000000  0002f7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00031a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7e  00000000  00000000  000329f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018524  00000000  00000000  00033676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012948  00000000  00000000  0004bb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cccf  00000000  00000000  0005e4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004550  00000000  00000000  000eb1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ef704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800411c 	.word	0x0800411c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800411c 	.word	0x0800411c

0800014c <map>:
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C1_Init(void);

int map(int value, int fromLow, int fromHigh, int toLow, int toHigh)
		{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
			return (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;
 800015a:	68fa      	ldr	r2, [r7, #12]
 800015c:	68bb      	ldr	r3, [r7, #8]
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	69b9      	ldr	r1, [r7, #24]
 8000162:	683a      	ldr	r2, [r7, #0]
 8000164:	1a8a      	subs	r2, r1, r2
 8000166:	fb03 f202 	mul.w	r2, r3, r2
 800016a:	6879      	ldr	r1, [r7, #4]
 800016c:	68bb      	ldr	r3, [r7, #8]
 800016e:	1acb      	subs	r3, r1, r3
 8000170:	fb92 f2f3 	sdiv	r2, r2, r3
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	4413      	add	r3, r2
		}
 8000178:	4618      	mov	r0, r3
 800017a:	3714      	adds	r7, #20
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
	...

08000184 <handleReceivedData>:

void handleReceivedData(uint8_t* rx_data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b088      	sub	sp, #32
 8000188:	af02      	add	r7, sp, #8
 800018a:	6078      	str	r0, [r7, #4]
	uint16_t angle = 0;
 800018c:	2300      	movs	r3, #0
 800018e:	823b      	strh	r3, [r7, #16]
	char identifier = rx_data[0];  // Find the identifier position
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	73fb      	strb	r3, [r7, #15]
	size_t terminatorPosition = 0;  // Find the terminator position
 8000196:	2300      	movs	r3, #0
 8000198:	617b      	str	r3, [r7, #20]
	uint8_t stop = 0;
 800019a:	2300      	movs	r3, #0
 800019c:	74fb      	strb	r3, [r7, #19]
	while (rx_data[terminatorPosition] != 'A' && rx_data[terminatorPosition] != 'B'
 800019e:	e005      	b.n	80001ac <handleReceivedData+0x28>
	    								&& rx_data[terminatorPosition] != 'C')
	{
	   terminatorPosition++;
 80001a0:	697b      	ldr	r3, [r7, #20]
 80001a2:	3301      	adds	r3, #1
 80001a4:	617b      	str	r3, [r7, #20]
	   if (terminatorPosition >= 8)
 80001a6:	697b      	ldr	r3, [r7, #20]
 80001a8:	2b07      	cmp	r3, #7
 80001aa:	d85a      	bhi.n	8000262 <handleReceivedData+0xde>
	while (rx_data[terminatorPosition] != 'A' && rx_data[terminatorPosition] != 'B'
 80001ac:	687a      	ldr	r2, [r7, #4]
 80001ae:	697b      	ldr	r3, [r7, #20]
 80001b0:	4413      	add	r3, r2
 80001b2:	781b      	ldrb	r3, [r3, #0]
	    								&& rx_data[terminatorPosition] != 'C')
 80001b4:	2b41      	cmp	r3, #65	; 0x41
 80001b6:	d00b      	beq.n	80001d0 <handleReceivedData+0x4c>
	while (rx_data[terminatorPosition] != 'A' && rx_data[terminatorPosition] != 'B'
 80001b8:	687a      	ldr	r2, [r7, #4]
 80001ba:	697b      	ldr	r3, [r7, #20]
 80001bc:	4413      	add	r3, r2
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b42      	cmp	r3, #66	; 0x42
 80001c2:	d005      	beq.n	80001d0 <handleReceivedData+0x4c>
	    								&& rx_data[terminatorPosition] != 'C')
 80001c4:	687a      	ldr	r2, [r7, #4]
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	4413      	add	r3, r2
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b43      	cmp	r3, #67	; 0x43
 80001ce:	d1e7      	bne.n	80001a0 <handleReceivedData+0x1c>
	   {

		   return;  // Invalid data format, handle error or ignore data
	   }
	}
	switch(terminatorPosition)
 80001d0:	697b      	ldr	r3, [r7, #20]
 80001d2:	2b04      	cmp	r3, #4
 80001d4:	d009      	beq.n	80001ea <handleReceivedData+0x66>
 80001d6:	697b      	ldr	r3, [r7, #20]
 80001d8:	2b04      	cmp	r3, #4
 80001da:	d80f      	bhi.n	80001fc <handleReceivedData+0x78>
 80001dc:	697b      	ldr	r3, [r7, #20]
 80001de:	2b02      	cmp	r3, #2
 80001e0:	d009      	beq.n	80001f6 <handleReceivedData+0x72>
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	2b03      	cmp	r3, #3
 80001e6:	d003      	beq.n	80001f0 <handleReceivedData+0x6c>
 80001e8:	e008      	b.n	80001fc <handleReceivedData+0x78>
	{
		case 4: stop = 3; break;
 80001ea:	2303      	movs	r3, #3
 80001ec:	74fb      	strb	r3, [r7, #19]
 80001ee:	e005      	b.n	80001fc <handleReceivedData+0x78>
		case 3: stop = 2; break;
 80001f0:	2302      	movs	r3, #2
 80001f2:	74fb      	strb	r3, [r7, #19]
 80001f4:	e002      	b.n	80001fc <handleReceivedData+0x78>
		case 2: stop = 1; break;
 80001f6:	2301      	movs	r3, #1
 80001f8:	74fb      	strb	r3, [r7, #19]
 80001fa:	bf00      	nop
	}
	char terminator = rx_data[terminatorPosition];
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	697b      	ldr	r3, [r7, #20]
 8000200:	4413      	add	r3, r2
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	73bb      	strb	r3, [r7, #14]

	char anglearray[4];

	memcpy(anglearray, &rx_data[1], stop);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	1c59      	adds	r1, r3, #1
 800020a:	7cfa      	ldrb	r2, [r7, #19]
 800020c:	f107 0308 	add.w	r3, r7, #8
 8000210:	4618      	mov	r0, r3
 8000212:	f003 ff75 	bl	8004100 <memcpy>
	memcpy(buffer, &rx_data[1], stop);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	3301      	adds	r3, #1
 800021a:	7cfa      	ldrb	r2, [r7, #19]
 800021c:	4619      	mov	r1, r3
 800021e:	4813      	ldr	r0, [pc, #76]	; (800026c <handleReceivedData+0xe8>)
 8000220:	f003 ff6e 	bl	8004100 <memcpy>

	angle = atoi(anglearray);  // Convert ASCII digits to integer
 8000224:	f107 0308 	add.w	r3, r7, #8
 8000228:	4618      	mov	r0, r3
 800022a:	f003 feab 	bl	8003f84 <atoi>
 800022e:	4603      	mov	r3, r0
 8000230:	823b      	strh	r3, [r7, #16]
	pwm = map(angle, 0, 180, 250, 1250);
 8000232:	8a38      	ldrh	r0, [r7, #16]
 8000234:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	23fa      	movs	r3, #250	; 0xfa
 800023c:	22b4      	movs	r2, #180	; 0xb4
 800023e:	2100      	movs	r1, #0
 8000240:	f7ff ff84 	bl	800014c <map>
 8000244:	4603      	mov	r3, r0
 8000246:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <handleReceivedData+0xec>)
 8000248:	6013      	str	r3, [r2, #0]
	//memcpy(buffer, anglearray, sizeof(anglearray));
	//memcpy(buffer, &rx_data[1], stop);

	SSD1306_GotoXY (0,0);
 800024a:	2100      	movs	r1, #0
 800024c:	2000      	movs	r0, #0
 800024e:	f000 faf1 	bl	8000834 <SSD1306_GotoXY>
	SSD1306_Puts(&buffer, &Font_11x18, 1);
 8000252:	2201      	movs	r2, #1
 8000254:	4907      	ldr	r1, [pc, #28]	; (8000274 <handleReceivedData+0xf0>)
 8000256:	4805      	ldr	r0, [pc, #20]	; (800026c <handleReceivedData+0xe8>)
 8000258:	f000 fb82 	bl	8000960 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800025c:	f000 fa46 	bl	80006ec <SSD1306_UpdateScreen>
 8000260:	e000      	b.n	8000264 <handleReceivedData+0xe0>
		   return;  // Invalid data format, handle error or ignore data
 8000262:	bf00      	nop


	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm);


}
 8000264:	3718      	adds	r7, #24
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	20000088 	.word	0x20000088
 8000270:	2000008c 	.word	0x2000008c
 8000274:	20000000 	.word	0x20000000

08000278 <main>:

int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  HAL_Init();
 800027c:	f000 fda4 	bl	8000dc8 <HAL_Init>
  SystemClock_Config();
 8000280:	f000 f81e 	bl	80002c0 <SystemClock_Config>
  MX_GPIO_Init();
 8000284:	f000 f926 	bl	80004d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000288:	f000 f8fa 	bl	8000480 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800028c:	f000 f882 	bl	8000394 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000290:	f000 f852 	bl	8000338 <MX_I2C1_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000294:	2104      	movs	r1, #4
 8000296:	4807      	ldr	r0, [pc, #28]	; (80002b4 <main+0x3c>)
 8000298:	f002 fbbe 	bl	8002a18 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1,rx_data,8);
 800029c:	2208      	movs	r2, #8
 800029e:	4906      	ldr	r1, [pc, #24]	; (80002b8 <main+0x40>)
 80002a0:	4806      	ldr	r0, [pc, #24]	; (80002bc <main+0x44>)
 80002a2:	f003 f937 	bl	8003514 <HAL_UART_Receive_IT>

  SSD1306_Init();
 80002a6:	f000 f95d 	bl	8000564 <SSD1306_Init>

  while (1)
  {
	  handleReceivedData(rx_data);
 80002aa:	4803      	ldr	r0, [pc, #12]	; (80002b8 <main+0x40>)
 80002ac:	f7ff ff6a 	bl	8000184 <handleReceivedData>
 80002b0:	e7fb      	b.n	80002aa <main+0x32>
 80002b2:	bf00      	nop
 80002b4:	200000e4 	.word	0x200000e4
 80002b8:	20000080 	.word	0x20000080
 80002bc:	2000012c 	.word	0x2000012c

080002c0 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b090      	sub	sp, #64	; 0x40
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	2228      	movs	r2, #40	; 0x28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 fee4 	bl	800409c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e2:	2302      	movs	r3, #2
 80002e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	2301      	movs	r3, #1
 80002e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	2310      	movs	r3, #16
 80002ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ee:	2300      	movs	r3, #0
 80002f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fed6 	bl	80020a8 <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000302:	f000 f929 	bl	8000558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f002 f944 	bl	80025ac <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032a:	f000 f915 	bl	8000558 <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3740      	adds	r7, #64	; 0x40
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_I2C1_Init+0x50>)
 800033e:	4a13      	ldr	r2, [pc, #76]	; (800038c <MX_I2C1_Init+0x54>)
 8000340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_I2C1_Init+0x50>)
 8000344:	4a12      	ldr	r2, [pc, #72]	; (8000390 <MX_I2C1_Init+0x58>)
 8000346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_I2C1_Init+0x50>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_I2C1_Init+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_I2C1_Init+0x50>)
 8000356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800035a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800035c:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <MX_I2C1_Init+0x50>)
 800035e:	2200      	movs	r2, #0
 8000360:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_I2C1_Init+0x50>)
 8000364:	2200      	movs	r2, #0
 8000366:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000368:	4b07      	ldr	r3, [pc, #28]	; (8000388 <MX_I2C1_Init+0x50>)
 800036a:	2200      	movs	r2, #0
 800036c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_I2C1_Init+0x50>)
 8000370:	2200      	movs	r2, #0
 8000372:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <MX_I2C1_Init+0x50>)
 8000376:	f001 f8cd 	bl	8001514 <HAL_I2C_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000380:	f000 f8ea 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000090 	.word	0x20000090
 800038c:	40005400 	.word	0x40005400
 8000390:	00061a80 	.word	0x00061a80

08000394 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08e      	sub	sp, #56	; 0x38
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a8:	f107 0320 	add.w	r3, r7, #32
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]
 80003c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003c4:	4b2d      	ldr	r3, [pc, #180]	; (800047c <MX_TIM2_Init+0xe8>)
 80003c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80003cc:	4b2b      	ldr	r3, [pc, #172]	; (800047c <MX_TIM2_Init+0xe8>)
 80003ce:	220f      	movs	r2, #15
 80003d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <MX_TIM2_Init+0xe8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80003d8:	4b28      	ldr	r3, [pc, #160]	; (800047c <MX_TIM2_Init+0xe8>)
 80003da:	f242 720f 	movw	r2, #9999	; 0x270f
 80003de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e0:	4b26      	ldr	r3, [pc, #152]	; (800047c <MX_TIM2_Init+0xe8>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e6:	4b25      	ldr	r3, [pc, #148]	; (800047c <MX_TIM2_Init+0xe8>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ec:	4823      	ldr	r0, [pc, #140]	; (800047c <MX_TIM2_Init+0xe8>)
 80003ee:	f002 fa6b 	bl	80028c8 <HAL_TIM_Base_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003f8:	f000 f8ae 	bl	8000558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000400:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000406:	4619      	mov	r1, r3
 8000408:	481c      	ldr	r0, [pc, #112]	; (800047c <MX_TIM2_Init+0xe8>)
 800040a:	f002 fc69 	bl	8002ce0 <HAL_TIM_ConfigClockSource>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000414:	f000 f8a0 	bl	8000558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000418:	4818      	ldr	r0, [pc, #96]	; (800047c <MX_TIM2_Init+0xe8>)
 800041a:	f002 faa4 	bl	8002966 <HAL_TIM_PWM_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000424:	f000 f898 	bl	8000558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000428:	2300      	movs	r3, #0
 800042a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000430:	f107 0320 	add.w	r3, r7, #32
 8000434:	4619      	mov	r1, r3
 8000436:	4811      	ldr	r0, [pc, #68]	; (800047c <MX_TIM2_Init+0xe8>)
 8000438:	f002 ffbe 	bl	80033b8 <HAL_TIMEx_MasterConfigSynchronization>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000442:	f000 f889 	bl	8000558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000446:	2360      	movs	r3, #96	; 0x60
 8000448:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2204      	movs	r2, #4
 800045a:	4619      	mov	r1, r3
 800045c:	4807      	ldr	r0, [pc, #28]	; (800047c <MX_TIM2_Init+0xe8>)
 800045e:	f002 fb7d 	bl	8002b5c <HAL_TIM_PWM_ConfigChannel>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000468:	f000 f876 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <MX_TIM2_Init+0xe8>)
 800046e:	f000 fbc9 	bl	8000c04 <HAL_TIM_MspPostInit>

}
 8000472:	bf00      	nop
 8000474:	3738      	adds	r7, #56	; 0x38
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200000e4 	.word	0x200000e4

08000480 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <MX_USART1_UART_Init+0x50>)
 8000488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 800048c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a6:	220c      	movs	r2, #12
 80004a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b8:	f002 ffdc 	bl	8003474 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004c2:	f000 f849 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2000012c 	.word	0x2000012c
 80004d0:	40013800 	.word	0x40013800

080004d4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_GPIO_Init+0x40>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <MX_GPIO_Init+0x40>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	6193      	str	r3, [r2, #24]
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_GPIO_Init+0x40>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_GPIO_Init+0x40>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <MX_GPIO_Init+0x40>)
 80004f8:	f043 0308 	orr.w	r3, r3, #8
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <MX_GPIO_Init+0x40>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0308 	and.w	r3, r3, #8
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_UART_RxCpltCallback+0x34>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d10b      	bne.n	8000542 <HAL_UART_RxCpltCallback+0x2a>
  {
	SSD1306_Clear();
 800052a:	f000 fa3e 	bl	80009aa <SSD1306_Clear>
	memset(rx_data, 0, sizeof(rx_data));
 800052e:	2208      	movs	r2, #8
 8000530:	2100      	movs	r1, #0
 8000532:	4807      	ldr	r0, [pc, #28]	; (8000550 <HAL_UART_RxCpltCallback+0x38>)
 8000534:	f003 fdb2 	bl	800409c <memset>
    HAL_UART_Receive_IT(&huart1,rx_data,8);
 8000538:	2208      	movs	r2, #8
 800053a:	4905      	ldr	r1, [pc, #20]	; (8000550 <HAL_UART_RxCpltCallback+0x38>)
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <HAL_UART_RxCpltCallback+0x3c>)
 800053e:	f002 ffe9 	bl	8003514 <HAL_UART_Receive_IT>
//    handleReceivedData(rx_data);
  }
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40013800 	.word	0x40013800
 8000550:	20000080 	.word	0x20000080
 8000554:	2000012c 	.word	0x2000012c

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	e7fe      	b.n	8000560 <Error_Handler+0x8>
	...

08000564 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800056a:	f000 fa27 	bl	80009bc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800056e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000572:	2201      	movs	r2, #1
 8000574:	2178      	movs	r1, #120	; 0x78
 8000576:	485b      	ldr	r0, [pc, #364]	; (80006e4 <SSD1306_Init+0x180>)
 8000578:	f001 fa0e 	bl	8001998 <HAL_I2C_IsDeviceReady>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000582:	2300      	movs	r3, #0
 8000584:	e0a9      	b.n	80006da <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000586:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800058a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800058c:	e002      	b.n	8000594 <SSD1306_Init+0x30>
		p--;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3b01      	subs	r3, #1
 8000592:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f9      	bne.n	800058e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800059a:	22ae      	movs	r2, #174	; 0xae
 800059c:	2100      	movs	r1, #0
 800059e:	2078      	movs	r0, #120	; 0x78
 80005a0:	f000 fa86 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80005a4:	2220      	movs	r2, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	2078      	movs	r0, #120	; 0x78
 80005aa:	f000 fa81 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80005ae:	2210      	movs	r2, #16
 80005b0:	2100      	movs	r1, #0
 80005b2:	2078      	movs	r0, #120	; 0x78
 80005b4:	f000 fa7c 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005b8:	22b0      	movs	r2, #176	; 0xb0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2078      	movs	r0, #120	; 0x78
 80005be:	f000 fa77 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80005c2:	22c8      	movs	r2, #200	; 0xc8
 80005c4:	2100      	movs	r1, #0
 80005c6:	2078      	movs	r0, #120	; 0x78
 80005c8:	f000 fa72 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2078      	movs	r0, #120	; 0x78
 80005d2:	f000 fa6d 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80005d6:	2210      	movs	r2, #16
 80005d8:	2100      	movs	r1, #0
 80005da:	2078      	movs	r0, #120	; 0x78
 80005dc:	f000 fa68 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80005e0:	2240      	movs	r2, #64	; 0x40
 80005e2:	2100      	movs	r1, #0
 80005e4:	2078      	movs	r0, #120	; 0x78
 80005e6:	f000 fa63 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80005ea:	2281      	movs	r2, #129	; 0x81
 80005ec:	2100      	movs	r1, #0
 80005ee:	2078      	movs	r0, #120	; 0x78
 80005f0:	f000 fa5e 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80005f4:	22ff      	movs	r2, #255	; 0xff
 80005f6:	2100      	movs	r1, #0
 80005f8:	2078      	movs	r0, #120	; 0x78
 80005fa:	f000 fa59 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80005fe:	22a1      	movs	r2, #161	; 0xa1
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	; 0x78
 8000604:	f000 fa54 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000608:	22a6      	movs	r2, #166	; 0xa6
 800060a:	2100      	movs	r1, #0
 800060c:	2078      	movs	r0, #120	; 0x78
 800060e:	f000 fa4f 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000612:	22a8      	movs	r2, #168	; 0xa8
 8000614:	2100      	movs	r1, #0
 8000616:	2078      	movs	r0, #120	; 0x78
 8000618:	f000 fa4a 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800061c:	223f      	movs	r2, #63	; 0x3f
 800061e:	2100      	movs	r1, #0
 8000620:	2078      	movs	r0, #120	; 0x78
 8000622:	f000 fa45 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000626:	22a4      	movs	r2, #164	; 0xa4
 8000628:	2100      	movs	r1, #0
 800062a:	2078      	movs	r0, #120	; 0x78
 800062c:	f000 fa40 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000630:	22d3      	movs	r2, #211	; 0xd3
 8000632:	2100      	movs	r1, #0
 8000634:	2078      	movs	r0, #120	; 0x78
 8000636:	f000 fa3b 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2078      	movs	r0, #120	; 0x78
 8000640:	f000 fa36 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000644:	22d5      	movs	r2, #213	; 0xd5
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	; 0x78
 800064a:	f000 fa31 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800064e:	22f0      	movs	r2, #240	; 0xf0
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	; 0x78
 8000654:	f000 fa2c 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000658:	22d9      	movs	r2, #217	; 0xd9
 800065a:	2100      	movs	r1, #0
 800065c:	2078      	movs	r0, #120	; 0x78
 800065e:	f000 fa27 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000662:	2222      	movs	r2, #34	; 0x22
 8000664:	2100      	movs	r1, #0
 8000666:	2078      	movs	r0, #120	; 0x78
 8000668:	f000 fa22 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800066c:	22da      	movs	r2, #218	; 0xda
 800066e:	2100      	movs	r1, #0
 8000670:	2078      	movs	r0, #120	; 0x78
 8000672:	f000 fa1d 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000676:	2212      	movs	r2, #18
 8000678:	2100      	movs	r1, #0
 800067a:	2078      	movs	r0, #120	; 0x78
 800067c:	f000 fa18 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000680:	22db      	movs	r2, #219	; 0xdb
 8000682:	2100      	movs	r1, #0
 8000684:	2078      	movs	r0, #120	; 0x78
 8000686:	f000 fa13 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800068a:	2220      	movs	r2, #32
 800068c:	2100      	movs	r1, #0
 800068e:	2078      	movs	r0, #120	; 0x78
 8000690:	f000 fa0e 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000694:	228d      	movs	r2, #141	; 0x8d
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	; 0x78
 800069a:	f000 fa09 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800069e:	2214      	movs	r2, #20
 80006a0:	2100      	movs	r1, #0
 80006a2:	2078      	movs	r0, #120	; 0x78
 80006a4:	f000 fa04 	bl	8000ab0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80006a8:	22af      	movs	r2, #175	; 0xaf
 80006aa:	2100      	movs	r1, #0
 80006ac:	2078      	movs	r0, #120	; 0x78
 80006ae:	f000 f9ff 	bl	8000ab0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80006b2:	222e      	movs	r2, #46	; 0x2e
 80006b4:	2100      	movs	r1, #0
 80006b6:	2078      	movs	r0, #120	; 0x78
 80006b8:	f000 f9fa 	bl	8000ab0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 f843 	bl	8000748 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80006c2:	f000 f813 	bl	80006ec <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <SSD1306_Init+0x184>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <SSD1306_Init+0x184>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <SSD1306_Init+0x184>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80006d8:	2301      	movs	r3, #1
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000090 	.word	0x20000090
 80006e8:	20000574 	.word	0x20000574

080006ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	e01d      	b.n	8000734 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	3b50      	subs	r3, #80	; 0x50
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	461a      	mov	r2, r3
 8000700:	2100      	movs	r1, #0
 8000702:	2078      	movs	r0, #120	; 0x78
 8000704:	f000 f9d4 	bl	8000ab0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2078      	movs	r0, #120	; 0x78
 800070e:	f000 f9cf 	bl	8000ab0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000712:	2210      	movs	r2, #16
 8000714:	2100      	movs	r1, #0
 8000716:	2078      	movs	r0, #120	; 0x78
 8000718:	f000 f9ca 	bl	8000ab0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	01db      	lsls	r3, r3, #7
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <SSD1306_UpdateScreen+0x58>)
 8000722:	441a      	add	r2, r3
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	2078      	movs	r0, #120	; 0x78
 800072a:	f000 f95b 	bl	80009e4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	3301      	adds	r3, #1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b07      	cmp	r3, #7
 8000738:	d9de      	bls.n	80006f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000174 	.word	0x20000174

08000748 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <SSD1306_Fill+0x14>
 8000758:	2300      	movs	r3, #0
 800075a:	e000      	b.n	800075e <SSD1306_Fill+0x16>
 800075c:	23ff      	movs	r3, #255	; 0xff
 800075e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000762:	4619      	mov	r1, r3
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <SSD1306_Fill+0x2c>)
 8000766:	f003 fc99 	bl	800409c <memset>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000174 	.word	0x20000174

08000778 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	80fb      	strh	r3, [r7, #6]
 8000782:	460b      	mov	r3, r1
 8000784:	80bb      	strh	r3, [r7, #4]
 8000786:	4613      	mov	r3, r2
 8000788:	70fb      	strb	r3, [r7, #3]
	if (
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	2b7f      	cmp	r3, #127	; 0x7f
 800078e:	d848      	bhi.n	8000822 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000790:	88bb      	ldrh	r3, [r7, #4]
 8000792:	2b3f      	cmp	r3, #63	; 0x3f
 8000794:	d845      	bhi.n	8000822 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <SSD1306_DrawPixel+0xb4>)
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d006      	beq.n	80007ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf0c      	ite	eq
 80007a4:	2301      	moveq	r3, #1
 80007a6:	2300      	movne	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d11a      	bne.n	80007e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80007b2:	88fa      	ldrh	r2, [r7, #6]
 80007b4:	88bb      	ldrh	r3, [r7, #4]
 80007b6:	08db      	lsrs	r3, r3, #3
 80007b8:	b298      	uxth	r0, r3
 80007ba:	4603      	mov	r3, r0
 80007bc:	01db      	lsls	r3, r3, #7
 80007be:	4413      	add	r3, r2
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <SSD1306_DrawPixel+0xb8>)
 80007c2:	5cd3      	ldrb	r3, [r2, r3]
 80007c4:	b25a      	sxtb	r2, r3
 80007c6:	88bb      	ldrh	r3, [r7, #4]
 80007c8:	f003 0307 	and.w	r3, r3, #7
 80007cc:	2101      	movs	r1, #1
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b259      	sxtb	r1, r3
 80007d8:	88fa      	ldrh	r2, [r7, #6]
 80007da:	4603      	mov	r3, r0
 80007dc:	01db      	lsls	r3, r3, #7
 80007de:	4413      	add	r3, r2
 80007e0:	b2c9      	uxtb	r1, r1
 80007e2:	4a13      	ldr	r2, [pc, #76]	; (8000830 <SSD1306_DrawPixel+0xb8>)
 80007e4:	54d1      	strb	r1, [r2, r3]
 80007e6:	e01d      	b.n	8000824 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80007e8:	88fa      	ldrh	r2, [r7, #6]
 80007ea:	88bb      	ldrh	r3, [r7, #4]
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	b298      	uxth	r0, r3
 80007f0:	4603      	mov	r3, r0
 80007f2:	01db      	lsls	r3, r3, #7
 80007f4:	4413      	add	r3, r2
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <SSD1306_DrawPixel+0xb8>)
 80007f8:	5cd3      	ldrb	r3, [r2, r3]
 80007fa:	b25a      	sxtb	r2, r3
 80007fc:	88bb      	ldrh	r3, [r7, #4]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	2101      	movs	r1, #1
 8000804:	fa01 f303 	lsl.w	r3, r1, r3
 8000808:	b25b      	sxtb	r3, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	b25b      	sxtb	r3, r3
 800080e:	4013      	ands	r3, r2
 8000810:	b259      	sxtb	r1, r3
 8000812:	88fa      	ldrh	r2, [r7, #6]
 8000814:	4603      	mov	r3, r0
 8000816:	01db      	lsls	r3, r3, #7
 8000818:	4413      	add	r3, r2
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <SSD1306_DrawPixel+0xb8>)
 800081e:	54d1      	strb	r1, [r2, r3]
 8000820:	e000      	b.n	8000824 <SSD1306_DrawPixel+0xac>
		return;
 8000822:	bf00      	nop
	}
}
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000574 	.word	0x20000574
 8000830:	20000174 	.word	0x20000174

08000834 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	460a      	mov	r2, r1
 800083e:	80fb      	strh	r3, [r7, #6]
 8000840:	4613      	mov	r3, r2
 8000842:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000844:	4a05      	ldr	r2, [pc, #20]	; (800085c <SSD1306_GotoXY+0x28>)
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <SSD1306_GotoXY+0x28>)
 800084c:	88bb      	ldrh	r3, [r7, #4]
 800084e:	8053      	strh	r3, [r2, #2]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000574 	.word	0x20000574

08000860 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4613      	mov	r3, r2
 800086e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000870:	4b3a      	ldr	r3, [pc, #232]	; (800095c <SSD1306_Putc+0xfc>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
	if (
 800087c:	2b7f      	cmp	r3, #127	; 0x7f
 800087e:	dc07      	bgt.n	8000890 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <SSD1306_Putc+0xfc>)
 8000882:	885b      	ldrh	r3, [r3, #2]
 8000884:	461a      	mov	r2, r3
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	785b      	ldrb	r3, [r3, #1]
 800088a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800088c:	2b3f      	cmp	r3, #63	; 0x3f
 800088e:	dd01      	ble.n	8000894 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000890:	2300      	movs	r3, #0
 8000892:	e05e      	b.n	8000952 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	e04b      	b.n	8000932 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	3b20      	subs	r3, #32
 80008a2:	6839      	ldr	r1, [r7, #0]
 80008a4:	7849      	ldrb	r1, [r1, #1]
 80008a6:	fb01 f303 	mul.w	r3, r1, r3
 80008aa:	4619      	mov	r1, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	440b      	add	r3, r1
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	4413      	add	r3, r2
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	e030      	b.n	8000920 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d010      	beq.n	80008f0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <SSD1306_Putc+0xfc>)
 80008d0:	881a      	ldrh	r2, [r3, #0]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	4413      	add	r3, r2
 80008d8:	b298      	uxth	r0, r3
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <SSD1306_Putc+0xfc>)
 80008dc:	885a      	ldrh	r2, [r3, #2]
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	4413      	add	r3, r2
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	79ba      	ldrb	r2, [r7, #6]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f7ff ff45 	bl	8000778 <SSD1306_DrawPixel>
 80008ee:	e014      	b.n	800091a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <SSD1306_Putc+0xfc>)
 80008f2:	881a      	ldrh	r2, [r3, #0]
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	4413      	add	r3, r2
 80008fa:	b298      	uxth	r0, r3
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <SSD1306_Putc+0xfc>)
 80008fe:	885a      	ldrh	r2, [r3, #2]
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	b29b      	uxth	r3, r3
 8000904:	4413      	add	r3, r2
 8000906:	b299      	uxth	r1, r3
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	2b00      	cmp	r3, #0
 800090c:	bf0c      	ite	eq
 800090e:	2301      	moveq	r3, #1
 8000910:	2300      	movne	r3, #0
 8000912:	b2db      	uxtb	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	f7ff ff2f 	bl	8000778 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	3301      	adds	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	4293      	cmp	r3, r2
 800092a:	d3c8      	bcc.n	80008be <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	3301      	adds	r3, #1
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	785b      	ldrb	r3, [r3, #1]
 8000936:	461a      	mov	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	4293      	cmp	r3, r2
 800093c:	d3ad      	bcc.n	800089a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <SSD1306_Putc+0xfc>)
 8000940:	881a      	ldrh	r2, [r3, #0]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b29b      	uxth	r3, r3
 8000948:	4413      	add	r3, r2
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <SSD1306_Putc+0xfc>)
 800094e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000950:	79fb      	ldrb	r3, [r7, #7]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000574 	.word	0x20000574

08000960 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	4613      	mov	r3, r2
 800096c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800096e:	e012      	b.n	8000996 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff71 	bl	8000860 <SSD1306_Putc>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	429a      	cmp	r2, r3
 8000988:	d002      	beq.n	8000990 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	e008      	b.n	80009a2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	3301      	adds	r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1e8      	bne.n	8000970 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	781b      	ldrb	r3, [r3, #0]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff feca 	bl	8000748 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80009b4:	f7ff fe9a 	bl	80006ec <SSD1306_UpdateScreen>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <ssd1306_I2C_Init+0x24>)
 80009c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009c6:	e002      	b.n	80009ce <ssd1306_I2C_Init+0x12>
		p--;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1f9      	bne.n	80009c8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	0003d090 	.word	0x0003d090

080009e4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b0c7      	sub	sp, #284	; 0x11c
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	4604      	mov	r4, r0
 80009ec:	4608      	mov	r0, r1
 80009ee:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80009f2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80009f6:	600a      	str	r2, [r1, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009fe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a02:	4622      	mov	r2, r4
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a0a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000a0e:	4602      	mov	r2, r0
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a1a:	460a      	mov	r2, r1
 8000a1c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a26:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a2a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000a2e:	7812      	ldrb	r2, [r2, #0]
 8000a30:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a38:	e015      	b.n	8000a66 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a3e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a42:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000a46:	6812      	ldr	r2, [r2, #0]
 8000a48:	441a      	add	r2, r3
 8000a4a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a4e:	3301      	adds	r3, #1
 8000a50:	7811      	ldrb	r1, [r2, #0]
 8000a52:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a56:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000a5a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a5c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a60:	3301      	adds	r3, #1
 8000a62:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a66:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a70:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000a74:	8812      	ldrh	r2, [r2, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d8df      	bhi.n	8000a3a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000a7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a7e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b299      	uxth	r1, r3
 8000a86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	f107 020c 	add.w	r2, r7, #12
 8000a98:	200a      	movs	r0, #10
 8000a9a:	9000      	str	r0, [sp, #0]
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <ssd1306_I2C_WriteMulti+0xc8>)
 8000a9e:	f000 fe7d 	bl	800179c <HAL_I2C_Master_Transmit>
}
 8000aa2:	bf00      	nop
 8000aa4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	20000090 	.word	0x20000090

08000ab0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
 8000aba:	460b      	mov	r3, r1
 8000abc:	71bb      	strb	r3, [r7, #6]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ac6:	797b      	ldrb	r3, [r7, #5]
 8000ac8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	b299      	uxth	r1, r3
 8000ace:	f107 020c 	add.w	r2, r7, #12
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <ssd1306_I2C_Write+0x38>)
 8000ada:	f000 fe5f 	bl	800179c <HAL_I2C_Master_Transmit>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000090 	.word	0x20000090

08000aec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_MspInit+0x5c>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_MspInit+0x5c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6193      	str	r3, [r2, #24]
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_MspInit+0x5c>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_MspInit+0x5c>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_MspInit+0x5c>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	61d3      	str	r3, [r2, #28]
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_MspInit+0x5c>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_MspInit+0x60>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_MspInit+0x60>)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010000 	.word	0x40010000

08000b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <HAL_I2C_MspInit+0x70>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d123      	bne.n	8000bb8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_I2C_MspInit+0x74>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <HAL_I2C_MspInit+0x74>)
 8000b76:	f043 0308 	orr.w	r3, r3, #8
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_I2C_MspInit+0x74>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0308 	and.w	r3, r3, #8
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b88:	23c0      	movs	r3, #192	; 0xc0
 8000b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <HAL_I2C_MspInit+0x78>)
 8000b9c:	f000 fb36 	bl	800120c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_I2C_MspInit+0x74>)
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_I2C_MspInit+0x74>)
 8000ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000baa:	61d3      	str	r3, [r2, #28]
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_I2C_MspInit+0x74>)
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_TIM_Base_MspInit+0x34>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_TIM_Base_MspInit+0x34>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_TIM_Base_MspInit+0x34>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	40021000 	.word	0x40021000

08000c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c22:	d117      	bne.n	8000c54 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_TIM_MspPostInit+0x58>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <HAL_TIM_MspPostInit+0x58>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_TIM_MspPostInit+0x58>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4804      	ldr	r0, [pc, #16]	; (8000c60 <HAL_TIM_MspPostInit+0x5c>)
 8000c50:	f000 fadc 	bl	800120c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010800 	.word	0x40010800

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <HAL_UART_MspInit+0x9c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d139      	bne.n	8000cf8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <HAL_UART_MspInit+0xa0>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <HAL_UART_MspInit+0xa0>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_UART_MspInit+0xa0>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_UART_MspInit+0xa0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <HAL_UART_MspInit+0xa0>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_UART_MspInit+0xa0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480f      	ldr	r0, [pc, #60]	; (8000d08 <HAL_UART_MspInit+0xa4>)
 8000cca:	f000 fa9f 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4809      	ldr	r0, [pc, #36]	; (8000d08 <HAL_UART_MspInit+0xa4>)
 8000ce4:	f000 fa92 	bl	800120c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2025      	movs	r0, #37	; 0x25
 8000cee:	f000 f9a4 	bl	800103a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cf2:	2025      	movs	r0, #37	; 0x25
 8000cf4:	f000 f9bd 	bl	8001072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40013800 	.word	0x40013800
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010800 	.word	0x40010800

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d52:	f000 f87f 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <USART1_IRQHandler+0x10>)
 8000d62:	f002 fbfd 	bl	8003560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000012c 	.word	0x2000012c

08000d70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff fff8 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d82:	490c      	ldr	r1, [pc, #48]	; (8000db4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d84:	4a0c      	ldr	r2, [pc, #48]	; (8000db8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d98:	4c09      	ldr	r4, [pc, #36]	; (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f003 f987 	bl	80040b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000daa:	f7ff fa65 	bl	8000278 <main>
  bx lr
 8000dae:	4770      	bx	lr
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000db8:	08004fc4 	.word	0x08004fc4
  ldr r2, =_sbss
 8000dbc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dc0:	200006b8 	.word	0x200006b8

08000dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_2_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x28>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x28>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f923 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	200f      	movs	r0, #15
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fe82 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40022000 	.word	0x40022000

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f93b 	bl	800108e <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f903 	bl	800103a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000010 	.word	0x20000010
 8000e50:	2000000c 	.word	0x2000000c

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_IncTick+0x1c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x20>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a03      	ldr	r2, [pc, #12]	; (8000e74 <HAL_IncTick+0x20>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	20000010 	.word	0x20000010
 8000e74:	2000057c 	.word	0x2000057c

08000e78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <HAL_GetTick+0x10>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	2000057c 	.word	0x2000057c

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4906      	ldr	r1, [pc, #24]	; (8000f24 <__NVIC_EnableIRQ+0x34>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff90 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff2d 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff42 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff90 	bl	8000f7c <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5f 	bl	8000f28 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff35 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffa2 	bl	8000fe0 <SysTick_Config>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d008      	beq.n	80010d0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2204      	movs	r2, #4
 80010c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e020      	b.n	8001112 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 020e 	bic.w	r2, r2, #14
 80010de:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001110:	7bfb      	ldrb	r3, [r7, #15]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d005      	beq.n	8001140 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2204      	movs	r2, #4
 8001138:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e051      	b.n	80011e4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 020e 	bic.w	r2, r2, #14
 800114e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <HAL_DMA_Abort_IT+0xd4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d029      	beq.n	80011be <HAL_DMA_Abort_IT+0xa2>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <HAL_DMA_Abort_IT+0xd8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d022      	beq.n	80011ba <HAL_DMA_Abort_IT+0x9e>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <HAL_DMA_Abort_IT+0xdc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d01a      	beq.n	80011b4 <HAL_DMA_Abort_IT+0x98>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <HAL_DMA_Abort_IT+0xe0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d012      	beq.n	80011ae <HAL_DMA_Abort_IT+0x92>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <HAL_DMA_Abort_IT+0xe4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00a      	beq.n	80011a8 <HAL_DMA_Abort_IT+0x8c>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_DMA_Abort_IT+0xe8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d102      	bne.n	80011a2 <HAL_DMA_Abort_IT+0x86>
 800119c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011a0:	e00e      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a6:	e00b      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ac:	e008      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b2:	e005      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b8:	e002      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011ba:	2310      	movs	r3, #16
 80011bc:	e000      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011be:	2301      	movs	r3, #1
 80011c0:	4a11      	ldr	r2, [pc, #68]	; (8001208 <HAL_DMA_Abort_IT+0xec>)
 80011c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
    } 
  }
  return status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020008 	.word	0x40020008
 80011f4:	4002001c 	.word	0x4002001c
 80011f8:	40020030 	.word	0x40020030
 80011fc:	40020044 	.word	0x40020044
 8001200:	40020058 	.word	0x40020058
 8001204:	4002006c 	.word	0x4002006c
 8001208:	40020000 	.word	0x40020000

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b08b      	sub	sp, #44	; 0x2c
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121e:	e169      	b.n	80014f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001220:	2201      	movs	r2, #1
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 8158 	bne.w	80014ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4a9a      	ldr	r2, [pc, #616]	; (80014ac <HAL_GPIO_Init+0x2a0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d05e      	beq.n	8001306 <HAL_GPIO_Init+0xfa>
 8001248:	4a98      	ldr	r2, [pc, #608]	; (80014ac <HAL_GPIO_Init+0x2a0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d875      	bhi.n	800133a <HAL_GPIO_Init+0x12e>
 800124e:	4a98      	ldr	r2, [pc, #608]	; (80014b0 <HAL_GPIO_Init+0x2a4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d058      	beq.n	8001306 <HAL_GPIO_Init+0xfa>
 8001254:	4a96      	ldr	r2, [pc, #600]	; (80014b0 <HAL_GPIO_Init+0x2a4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d86f      	bhi.n	800133a <HAL_GPIO_Init+0x12e>
 800125a:	4a96      	ldr	r2, [pc, #600]	; (80014b4 <HAL_GPIO_Init+0x2a8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d052      	beq.n	8001306 <HAL_GPIO_Init+0xfa>
 8001260:	4a94      	ldr	r2, [pc, #592]	; (80014b4 <HAL_GPIO_Init+0x2a8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d869      	bhi.n	800133a <HAL_GPIO_Init+0x12e>
 8001266:	4a94      	ldr	r2, [pc, #592]	; (80014b8 <HAL_GPIO_Init+0x2ac>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d04c      	beq.n	8001306 <HAL_GPIO_Init+0xfa>
 800126c:	4a92      	ldr	r2, [pc, #584]	; (80014b8 <HAL_GPIO_Init+0x2ac>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d863      	bhi.n	800133a <HAL_GPIO_Init+0x12e>
 8001272:	4a92      	ldr	r2, [pc, #584]	; (80014bc <HAL_GPIO_Init+0x2b0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d046      	beq.n	8001306 <HAL_GPIO_Init+0xfa>
 8001278:	4a90      	ldr	r2, [pc, #576]	; (80014bc <HAL_GPIO_Init+0x2b0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d85d      	bhi.n	800133a <HAL_GPIO_Init+0x12e>
 800127e:	2b12      	cmp	r3, #18
 8001280:	d82a      	bhi.n	80012d8 <HAL_GPIO_Init+0xcc>
 8001282:	2b12      	cmp	r3, #18
 8001284:	d859      	bhi.n	800133a <HAL_GPIO_Init+0x12e>
 8001286:	a201      	add	r2, pc, #4	; (adr r2, 800128c <HAL_GPIO_Init+0x80>)
 8001288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128c:	08001307 	.word	0x08001307
 8001290:	080012e1 	.word	0x080012e1
 8001294:	080012f3 	.word	0x080012f3
 8001298:	08001335 	.word	0x08001335
 800129c:	0800133b 	.word	0x0800133b
 80012a0:	0800133b 	.word	0x0800133b
 80012a4:	0800133b 	.word	0x0800133b
 80012a8:	0800133b 	.word	0x0800133b
 80012ac:	0800133b 	.word	0x0800133b
 80012b0:	0800133b 	.word	0x0800133b
 80012b4:	0800133b 	.word	0x0800133b
 80012b8:	0800133b 	.word	0x0800133b
 80012bc:	0800133b 	.word	0x0800133b
 80012c0:	0800133b 	.word	0x0800133b
 80012c4:	0800133b 	.word	0x0800133b
 80012c8:	0800133b 	.word	0x0800133b
 80012cc:	0800133b 	.word	0x0800133b
 80012d0:	080012e9 	.word	0x080012e9
 80012d4:	080012fd 	.word	0x080012fd
 80012d8:	4a79      	ldr	r2, [pc, #484]	; (80014c0 <HAL_GPIO_Init+0x2b4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012de:	e02c      	b.n	800133a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	623b      	str	r3, [r7, #32]
          break;
 80012e6:	e029      	b.n	800133c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	3304      	adds	r3, #4
 80012ee:	623b      	str	r3, [r7, #32]
          break;
 80012f0:	e024      	b.n	800133c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	3308      	adds	r3, #8
 80012f8:	623b      	str	r3, [r7, #32]
          break;
 80012fa:	e01f      	b.n	800133c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	330c      	adds	r3, #12
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e01a      	b.n	800133c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800130e:	2304      	movs	r3, #4
 8001310:	623b      	str	r3, [r7, #32]
          break;
 8001312:	e013      	b.n	800133c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d105      	bne.n	8001328 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800131c:	2308      	movs	r3, #8
 800131e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	611a      	str	r2, [r3, #16]
          break;
 8001326:	e009      	b.n	800133c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	615a      	str	r2, [r3, #20]
          break;
 8001332:	e003      	b.n	800133c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
          break;
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x130>
          break;
 800133a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2bff      	cmp	r3, #255	; 0xff
 8001340:	d801      	bhi.n	8001346 <HAL_GPIO_Init+0x13a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	e001      	b.n	800134a <HAL_GPIO_Init+0x13e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3304      	adds	r3, #4
 800134a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2bff      	cmp	r3, #255	; 0xff
 8001350:	d802      	bhi.n	8001358 <HAL_GPIO_Init+0x14c>
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x152>
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	3b08      	subs	r3, #8
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	210f      	movs	r1, #15
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	401a      	ands	r2, r3
 8001370:	6a39      	ldr	r1, [r7, #32]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	431a      	orrs	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 80b1 	beq.w	80014ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800138c:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a4c      	ldr	r2, [pc, #304]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013a4:	4a48      	ldr	r2, [pc, #288]	; (80014c8 <HAL_GPIO_Init+0x2bc>)
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4013      	ands	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a40      	ldr	r2, [pc, #256]	; (80014cc <HAL_GPIO_Init+0x2c0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d013      	beq.n	80013f8 <HAL_GPIO_Init+0x1ec>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a3f      	ldr	r2, [pc, #252]	; (80014d0 <HAL_GPIO_Init+0x2c4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d00d      	beq.n	80013f4 <HAL_GPIO_Init+0x1e8>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a3e      	ldr	r2, [pc, #248]	; (80014d4 <HAL_GPIO_Init+0x2c8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d007      	beq.n	80013f0 <HAL_GPIO_Init+0x1e4>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a3d      	ldr	r2, [pc, #244]	; (80014d8 <HAL_GPIO_Init+0x2cc>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d101      	bne.n	80013ec <HAL_GPIO_Init+0x1e0>
 80013e8:	2303      	movs	r3, #3
 80013ea:	e006      	b.n	80013fa <HAL_GPIO_Init+0x1ee>
 80013ec:	2304      	movs	r3, #4
 80013ee:	e004      	b.n	80013fa <HAL_GPIO_Init+0x1ee>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0x1ee>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_GPIO_Init+0x1ee>
 80013f8:	2300      	movs	r3, #0
 80013fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fc:	f002 0203 	and.w	r2, r2, #3
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	4093      	lsls	r3, r2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800140a:	492f      	ldr	r1, [pc, #188]	; (80014c8 <HAL_GPIO_Init+0x2bc>)
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	492c      	ldr	r1, [pc, #176]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	608b      	str	r3, [r1, #8]
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	43db      	mvns	r3, r3
 800143a:	4928      	ldr	r1, [pc, #160]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 800143c:	4013      	ands	r3, r2
 800143e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	4922      	ldr	r1, [pc, #136]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	60cb      	str	r3, [r1, #12]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	491e      	ldr	r1, [pc, #120]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 8001464:	4013      	ands	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	4918      	ldr	r1, [pc, #96]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	4914      	ldr	r1, [pc, #80]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 800148c:	4013      	ands	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d021      	beq.n	80014e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	490e      	ldr	r1, [pc, #56]	; (80014dc <HAL_GPIO_Init+0x2d0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
 80014a8:	e021      	b.n	80014ee <HAL_GPIO_Init+0x2e2>
 80014aa:	bf00      	nop
 80014ac:	10320000 	.word	0x10320000
 80014b0:	10310000 	.word	0x10310000
 80014b4:	10220000 	.word	0x10220000
 80014b8:	10210000 	.word	0x10210000
 80014bc:	10120000 	.word	0x10120000
 80014c0:	10110000 	.word	0x10110000
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000
 80014cc:	40010800 	.word	0x40010800
 80014d0:	40010c00 	.word	0x40010c00
 80014d4:	40011000 	.word	0x40011000
 80014d8:	40011400 	.word	0x40011400
 80014dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_GPIO_Init+0x304>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	4909      	ldr	r1, [pc, #36]	; (8001510 <HAL_GPIO_Init+0x304>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	3301      	adds	r3, #1
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	fa22 f303 	lsr.w	r3, r2, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f47f ae8e 	bne.w	8001220 <HAL_GPIO_Init+0x14>
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	372c      	adds	r7, #44	; 0x2c
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	40010400 	.word	0x40010400

08001514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e12b      	b.n	800177e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fb08 	bl	8000b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001578:	f001 f960 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 800157c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a81      	ldr	r2, [pc, #516]	; (8001788 <HAL_I2C_Init+0x274>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d807      	bhi.n	8001598 <HAL_I2C_Init+0x84>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a80      	ldr	r2, [pc, #512]	; (800178c <HAL_I2C_Init+0x278>)
 800158c:	4293      	cmp	r3, r2
 800158e:	bf94      	ite	ls
 8001590:	2301      	movls	r3, #1
 8001592:	2300      	movhi	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	e006      	b.n	80015a6 <HAL_I2C_Init+0x92>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a7d      	ldr	r2, [pc, #500]	; (8001790 <HAL_I2C_Init+0x27c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	bf94      	ite	ls
 80015a0:	2301      	movls	r3, #1
 80015a2:	2300      	movhi	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0e7      	b.n	800177e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4a78      	ldr	r2, [pc, #480]	; (8001794 <HAL_I2C_Init+0x280>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	0c9b      	lsrs	r3, r3, #18
 80015b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a6a      	ldr	r2, [pc, #424]	; (8001788 <HAL_I2C_Init+0x274>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d802      	bhi.n	80015e8 <HAL_I2C_Init+0xd4>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3301      	adds	r3, #1
 80015e6:	e009      	b.n	80015fc <HAL_I2C_Init+0xe8>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	4a69      	ldr	r2, [pc, #420]	; (8001798 <HAL_I2C_Init+0x284>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	3301      	adds	r3, #1
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	430b      	orrs	r3, r1
 8001602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800160e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	495c      	ldr	r1, [pc, #368]	; (8001788 <HAL_I2C_Init+0x274>)
 8001618:	428b      	cmp	r3, r1
 800161a:	d819      	bhi.n	8001650 <HAL_I2C_Init+0x13c>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e59      	subs	r1, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fbb1 f3f3 	udiv	r3, r1, r3
 800162a:	1c59      	adds	r1, r3, #1
 800162c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001630:	400b      	ands	r3, r1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00a      	beq.n	800164c <HAL_I2C_Init+0x138>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fbb1 f3f3 	udiv	r3, r1, r3
 8001644:	3301      	adds	r3, #1
 8001646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164a:	e051      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 800164c:	2304      	movs	r3, #4
 800164e:	e04f      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d111      	bne.n	800167c <HAL_I2C_Init+0x168>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1e58      	subs	r0, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	440b      	add	r3, r1
 8001666:	fbb0 f3f3 	udiv	r3, r0, r3
 800166a:	3301      	adds	r3, #1
 800166c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf0c      	ite	eq
 8001674:	2301      	moveq	r3, #1
 8001676:	2300      	movne	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	e012      	b.n	80016a2 <HAL_I2C_Init+0x18e>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1e58      	subs	r0, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6859      	ldr	r1, [r3, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	0099      	lsls	r1, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001692:	3301      	adds	r3, #1
 8001694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2C_Init+0x196>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e022      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10e      	bne.n	80016d0 <HAL_I2C_Init+0x1bc>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1e58      	subs	r0, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6859      	ldr	r1, [r3, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	440b      	add	r3, r1
 80016c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ce:	e00f      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1e58      	subs	r0, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6859      	ldr	r1, [r3, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	0099      	lsls	r1, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	6809      	ldr	r1, [r1, #0]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69da      	ldr	r2, [r3, #28]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800171e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6911      	ldr	r1, [r2, #16]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68d2      	ldr	r2, [r2, #12]
 800172a:	4311      	orrs	r1, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	430b      	orrs	r3, r1
 8001732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2220      	movs	r2, #32
 800176a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	000186a0 	.word	0x000186a0
 800178c:	001e847f 	.word	0x001e847f
 8001790:	003d08ff 	.word	0x003d08ff
 8001794:	431bde83 	.word	0x431bde83
 8001798:	10624dd3 	.word	0x10624dd3

0800179c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	461a      	mov	r2, r3
 80017a8:	460b      	mov	r3, r1
 80017aa:	817b      	strh	r3, [r7, #10]
 80017ac:	4613      	mov	r3, r2
 80017ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff fb62 	bl	8000e78 <HAL_GetTick>
 80017b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b20      	cmp	r3, #32
 80017c0:	f040 80e0 	bne.w	8001984 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2319      	movs	r3, #25
 80017ca:	2201      	movs	r2, #1
 80017cc:	4970      	ldr	r1, [pc, #448]	; (8001990 <HAL_I2C_Master_Transmit+0x1f4>)
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 fa92 	bl	8001cf8 <I2C_WaitOnFlagUntilTimeout>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017da:	2302      	movs	r3, #2
 80017dc:	e0d3      	b.n	8001986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_I2C_Master_Transmit+0x50>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e0cc      	b.n	8001986 <HAL_I2C_Master_Transmit+0x1ea>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d007      	beq.n	8001812 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0201 	orr.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001820:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2221      	movs	r2, #33	; 0x21
 8001826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2210      	movs	r2, #16
 800182e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	893a      	ldrh	r2, [r7, #8]
 8001842:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4a50      	ldr	r2, [pc, #320]	; (8001994 <HAL_I2C_Master_Transmit+0x1f8>)
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001854:	8979      	ldrh	r1, [r7, #10]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	6a3a      	ldr	r2, [r7, #32]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f9ca 	bl	8001bf4 <I2C_MasterRequestWrite>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e08d      	b.n	8001986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001880:	e066      	b.n	8001950 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	6a39      	ldr	r1, [r7, #32]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 fb50 	bl	8001f2c <I2C_WaitOnTXEFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00d      	beq.n	80018ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	2b04      	cmp	r3, #4
 8001898:	d107      	bne.n	80018aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e06b      	b.n	8001986 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d11b      	bne.n	8001924 <HAL_I2C_Master_Transmit+0x188>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d017      	beq.n	8001924 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	6a39      	ldr	r1, [r7, #32]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 fb47 	bl	8001fbc <I2C_WaitOnBTFFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00d      	beq.n	8001950 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	2b04      	cmp	r3, #4
 800193a:	d107      	bne.n	800194c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e01a      	b.n	8001986 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	d194      	bne.n	8001882 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	e000      	b.n	8001986 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001984:	2302      	movs	r3, #2
  }
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	00100002 	.word	0x00100002
 8001994:	ffff0000 	.word	0xffff0000

08001998 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af02      	add	r7, sp, #8
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	460b      	mov	r3, r1
 80019a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff fa66 	bl	8000e78 <HAL_GetTick>
 80019ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	f040 8111 	bne.w	8001be2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2319      	movs	r3, #25
 80019c6:	2201      	movs	r2, #1
 80019c8:	4988      	ldr	r1, [pc, #544]	; (8001bec <HAL_I2C_IsDeviceReady+0x254>)
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f994 	bl	8001cf8 <I2C_WaitOnFlagUntilTimeout>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
 80019d8:	e104      	b.n	8001be4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_I2C_IsDeviceReady+0x50>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e0fd      	b.n	8001be4 <HAL_I2C_IsDeviceReady+0x24c>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d007      	beq.n	8001a0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2224      	movs	r2, #36	; 0x24
 8001a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4a70      	ldr	r2, [pc, #448]	; (8001bf0 <HAL_I2C_IsDeviceReady+0x258>)
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 f952 	bl	8001cf8 <I2C_WaitOnFlagUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00d      	beq.n	8001a76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a68:	d103      	bne.n	8001a72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0b6      	b.n	8001be4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a76:	897b      	ldrh	r3, [r7, #10]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a86:	f7ff f9f7 	bl	8000e78 <HAL_GetTick>
 8001a8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	bf0c      	ite	eq
 8001a9a:	2301      	moveq	r3, #1
 8001a9c:	2300      	movne	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab0:	bf0c      	ite	eq
 8001ab2:	2301      	moveq	r3, #1
 8001ab4:	2300      	movne	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001aba:	e025      	b.n	8001b08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001abc:	f7ff f9dc 	bl	8000e78 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d302      	bcc.n	8001ad2 <HAL_I2C_IsDeviceReady+0x13a>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d103      	bne.n	8001ada <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	22a0      	movs	r2, #160	; 0xa0
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2301      	moveq	r3, #1
 8001aea:	2300      	movne	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2ba0      	cmp	r3, #160	; 0xa0
 8001b12:	d005      	beq.n	8001b20 <HAL_I2C_IsDeviceReady+0x188>
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_I2C_IsDeviceReady+0x188>
 8001b1a:	7dbb      	ldrb	r3, [r7, #22]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0cd      	beq.n	8001abc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d129      	bne.n	8001b8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2319      	movs	r3, #25
 8001b62:	2201      	movs	r2, #1
 8001b64:	4921      	ldr	r1, [pc, #132]	; (8001bec <HAL_I2C_IsDeviceReady+0x254>)
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f8c6 	bl	8001cf8 <I2C_WaitOnFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e036      	b.n	8001be4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e02c      	b.n	8001be4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ba2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2319      	movs	r3, #25
 8001baa:	2201      	movs	r2, #1
 8001bac:	490f      	ldr	r1, [pc, #60]	; (8001bec <HAL_I2C_IsDeviceReady+0x254>)
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f8a2 	bl	8001cf8 <I2C_WaitOnFlagUntilTimeout>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e012      	b.n	8001be4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f4ff af32 	bcc.w	8001a32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
  }
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3720      	adds	r7, #32
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	00100002 	.word	0x00100002
 8001bf0:	ffff0000 	.word	0xffff0000

08001bf4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	460b      	mov	r3, r1
 8001c02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d006      	beq.n	8001c1e <I2C_MasterRequestWrite+0x2a>
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d003      	beq.n	8001c1e <I2C_MasterRequestWrite+0x2a>
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c1c:	d108      	bne.n	8001c30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e00b      	b.n	8001c48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	2b12      	cmp	r3, #18
 8001c36:	d107      	bne.n	8001c48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f84f 	bl	8001cf8 <I2C_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00d      	beq.n	8001c7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c6e:	d103      	bne.n	8001c78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e035      	b.n	8001ce8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c84:	d108      	bne.n	8001c98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c86:	897b      	ldrh	r3, [r7, #10]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	e01b      	b.n	8001cd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c98:	897b      	ldrh	r3, [r7, #10]
 8001c9a:	11db      	asrs	r3, r3, #7
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f003 0306 	and.w	r3, r3, #6
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f063 030f 	orn	r3, r3, #15
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <I2C_MasterRequestWrite+0xfc>)
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f898 	bl	8001dec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e010      	b.n	8001ce8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <I2C_MasterRequestWrite+0x100>)
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f888 	bl	8001dec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	00010008 	.word	0x00010008
 8001cf4:	00010002 	.word	0x00010002

08001cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d08:	e048      	b.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d044      	beq.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d12:	f7ff f8b1 	bl	8000e78 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d302      	bcc.n	8001d28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d139      	bne.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d10d      	bne.n	8001d4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	e00c      	b.n	8001d68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	43da      	mvns	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d116      	bne.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f043 0220 	orr.w	r2, r3, #32
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e023      	b.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	0c1b      	lsrs	r3, r3, #16
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d10d      	bne.n	8001dc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	43da      	mvns	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4013      	ands	r3, r2
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	e00c      	b.n	8001ddc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d093      	beq.n	8001d0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dfa:	e071      	b.n	8001ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e0a:	d123      	bne.n	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f043 0204 	orr.w	r2, r3, #4
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e067      	b.n	8001f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5a:	d041      	beq.n	8001ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5c:	f7ff f80c 	bl	8000e78 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d302      	bcc.n	8001e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d136      	bne.n	8001ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	0c1b      	lsrs	r3, r3, #16
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d10c      	bne.n	8001e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4013      	ands	r3, r2
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf14      	ite	ne
 8001e8e:	2301      	movne	r3, #1
 8001e90:	2300      	moveq	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	e00b      	b.n	8001eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d016      	beq.n	8001ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f043 0220 	orr.w	r2, r3, #32
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e021      	b.n	8001f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	0c1b      	lsrs	r3, r3, #16
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d10c      	bne.n	8001f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e00b      	b.n	8001f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f47f af6d 	bne.w	8001dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f38:	e034      	b.n	8001fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f886 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e034      	b.n	8001fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d028      	beq.n	8001fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7fe ff91 	bl	8000e78 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d11d      	bne.n	8001fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	2b80      	cmp	r3, #128	; 0x80
 8001f74:	d016      	beq.n	8001fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f043 0220 	orr.w	r2, r3, #32
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e007      	b.n	8001fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	2b80      	cmp	r3, #128	; 0x80
 8001fb0:	d1c3      	bne.n	8001f3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fc8:	e034      	b.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f83e 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e034      	b.n	8002044 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d028      	beq.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7fe ff49 	bl	8000e78 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d11d      	bne.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d016      	beq.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e007      	b.n	8002044 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b04      	cmp	r3, #4
 8002040:	d1c3      	bne.n	8001fca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002062:	d11b      	bne.n	800209c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800206c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f043 0204 	orr.w	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e272      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8087 	beq.w	80021d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c8:	4b92      	ldr	r3, [pc, #584]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d00c      	beq.n	80020ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d4:	4b8f      	ldr	r3, [pc, #572]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d112      	bne.n	8002106 <HAL_RCC_OscConfig+0x5e>
 80020e0:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d10b      	bne.n	8002106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ee:	4b89      	ldr	r3, [pc, #548]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d06c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x12c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d168      	bne.n	80021d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e24c      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x76>
 8002110:	4b80      	ldr	r3, [pc, #512]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a7f      	ldr	r2, [pc, #508]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	e02e      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x98>
 8002126:	4b7b      	ldr	r3, [pc, #492]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a7a      	ldr	r2, [pc, #488]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800212c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b78      	ldr	r3, [pc, #480]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a77      	ldr	r2, [pc, #476]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e01d      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0xbc>
 800214a:	4b72      	ldr	r3, [pc, #456]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a71      	ldr	r2, [pc, #452]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a6e      	ldr	r2, [pc, #440]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 8002164:	4b6b      	ldr	r3, [pc, #428]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a6a      	ldr	r2, [pc, #424]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b68      	ldr	r3, [pc, #416]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a67      	ldr	r2, [pc, #412]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe fe78 	bl	8000e78 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7fe fe74 	bl	8000e78 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e200      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0xe4>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe fe64 	bl	8000e78 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe fe60 	bl	8000e78 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1ec      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x10c>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d063      	beq.n	80022aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e2:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ee:	4b49      	ldr	r3, [pc, #292]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d11c      	bne.n	8002234 <HAL_RCC_OscConfig+0x18c>
 80021fa:	4b46      	ldr	r3, [pc, #280]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	4b43      	ldr	r3, [pc, #268]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_RCC_OscConfig+0x176>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e1c0      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4939      	ldr	r1, [pc, #228]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	e03a      	b.n	80022aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223c:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7fe fe19 	bl	8000e78 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7fe fe15 	bl	8000e78 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1a1      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4927      	ldr	r1, [pc, #156]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	e015      	b.n	80022aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7fe fdf8 	bl	8000e78 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228c:	f7fe fdf4 	bl	8000e78 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e180      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d03a      	beq.n	800232c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d019      	beq.n	80022f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_RCC_OscConfig+0x274>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c4:	f7fe fdd8 	bl	8000e78 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022cc:	f7fe fdd4 	bl	8000e78 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e160      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ea:	2001      	movs	r0, #1
 80022ec:	f000 face 	bl	800288c <RCC_Delay>
 80022f0:	e01c      	b.n	800232c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_RCC_OscConfig+0x274>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7fe fdbe 	bl	8000e78 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fe:	e00f      	b.n	8002320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe fdba 	bl	8000e78 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d908      	bls.n	8002320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e146      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	42420000 	.word	0x42420000
 800231c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002320:	4b92      	ldr	r3, [pc, #584]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e9      	bne.n	8002300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a6 	beq.w	8002486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233e:	4b8b      	ldr	r3, [pc, #556]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10d      	bne.n	8002366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b88      	ldr	r3, [pc, #544]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4a87      	ldr	r2, [pc, #540]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	61d3      	str	r3, [r2, #28]
 8002356:	4b85      	ldr	r3, [pc, #532]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002362:	2301      	movs	r3, #1
 8002364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002366:	4b82      	ldr	r3, [pc, #520]	; (8002570 <HAL_RCC_OscConfig+0x4c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d118      	bne.n	80023a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002372:	4b7f      	ldr	r3, [pc, #508]	; (8002570 <HAL_RCC_OscConfig+0x4c8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7e      	ldr	r2, [pc, #504]	; (8002570 <HAL_RCC_OscConfig+0x4c8>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237e:	f7fe fd7b 	bl	8000e78 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002386:	f7fe fd77 	bl	8000e78 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b64      	cmp	r3, #100	; 0x64
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e103      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	4b75      	ldr	r3, [pc, #468]	; (8002570 <HAL_RCC_OscConfig+0x4c8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x312>
 80023ac:	4b6f      	ldr	r3, [pc, #444]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a6e      	ldr	r2, [pc, #440]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	e02d      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x334>
 80023c2:	4b6a      	ldr	r3, [pc, #424]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a69      	ldr	r2, [pc, #420]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	4b67      	ldr	r3, [pc, #412]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a66      	ldr	r2, [pc, #408]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	e01c      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x356>
 80023e4:	4b61      	ldr	r3, [pc, #388]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a60      	ldr	r2, [pc, #384]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	4b5e      	ldr	r3, [pc, #376]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a5d      	ldr	r2, [pc, #372]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e00b      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023fe:	4b5b      	ldr	r3, [pc, #364]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a5a      	ldr	r2, [pc, #360]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	4b58      	ldr	r3, [pc, #352]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d015      	beq.n	800244a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe fd2b 	bl	8000e78 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fd27 	bl	8000e78 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0b1      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ee      	beq.n	8002426 <HAL_RCC_OscConfig+0x37e>
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7fe fd15 	bl	8000e78 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fd11 	bl	8000e78 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e09b      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	4b40      	ldr	r3, [pc, #256]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ee      	bne.n	8002452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4b3c      	ldr	r3, [pc, #240]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a3b      	ldr	r2, [pc, #236]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8087 	beq.w	800259e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002490:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d061      	beq.n	8002560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d146      	bne.n	8002532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a4:	4b33      	ldr	r3, [pc, #204]	; (8002574 <HAL_RCC_OscConfig+0x4cc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe fce5 	bl	8000e78 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b2:	f7fe fce1 	bl	8000e78 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e06d      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c4:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d108      	bne.n	80024ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4921      	ldr	r1, [pc, #132]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a19      	ldr	r1, [r3, #32]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	430b      	orrs	r3, r1
 80024fe:	491b      	ldr	r1, [pc, #108]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x4cc>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe fcb5 	bl	8000e78 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7fe fcb1 	bl	8000e78 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e03d      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x46a>
 8002530:	e035      	b.n	800259e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_RCC_OscConfig+0x4cc>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7fe fc9e 	bl	8000e78 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fc9a 	bl	8000e78 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e026      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x498>
 800255e:	e01e      	b.n	800259e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e019      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
 800256c:	40021000 	.word	0x40021000
 8002570:	40007000 	.word	0x40007000
 8002574:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_OscConfig+0x500>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	429a      	cmp	r2, r3
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0d0      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c0:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d910      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 0207 	bic.w	r2, r3, #7
 80025d6:	4965      	ldr	r1, [pc, #404]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002608:	4b59      	ldr	r3, [pc, #356]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a58      	ldr	r2, [pc, #352]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800262a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	494d      	ldr	r1, [pc, #308]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d040      	beq.n	80026cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d115      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e073      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06b      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f023 0203 	bic.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4936      	ldr	r1, [pc, #216]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800269c:	f7fe fbec 	bl	8000e78 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a4:	f7fe fbe8 	bl	8000e78 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e053      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 020c 	and.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d1eb      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d210      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	4922      	ldr	r1, [pc, #136]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e032      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4916      	ldr	r1, [pc, #88]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	490e      	ldr	r1, [pc, #56]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273a:	f000 f821 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	490a      	ldr	r1, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	5ccb      	ldrb	r3, [r1, r3]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1cc>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1d0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fb4a 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40022000 	.word	0x40022000
 8002770:	40021000 	.word	0x40021000
 8002774:	08004e90 	.word	0x08004e90
 8002778:	20000008 	.word	0x20000008
 800277c:	2000000c 	.word	0x2000000c

08002780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <HAL_RCC_GetSysClockFreq+0x94>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d002      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x30>
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d003      	beq.n	80027b6 <HAL_RCC_GetSysClockFreq+0x36>
 80027ae:	e027      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_RCC_GetSysClockFreq+0x98>)
 80027b2:	613b      	str	r3, [r7, #16]
      break;
 80027b4:	e027      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	0c9b      	lsrs	r3, r3, #18
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	4a17      	ldr	r2, [pc, #92]	; (800281c <HAL_RCC_GetSysClockFreq+0x9c>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d010      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_RCC_GetSysClockFreq+0x94>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	0c5b      	lsrs	r3, r3, #17
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	4a11      	ldr	r2, [pc, #68]	; (8002820 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <HAL_RCC_GetSysClockFreq+0x98>)
 80027e2:	fb03 f202 	mul.w	r2, r3, r2
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e004      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	613b      	str	r3, [r7, #16]
      break;
 80027fe:	e002      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_GetSysClockFreq+0x98>)
 8002802:	613b      	str	r3, [r7, #16]
      break;
 8002804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002806:	693b      	ldr	r3, [r7, #16]
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	007a1200 	.word	0x007a1200
 800281c:	08004ea8 	.word	0x08004ea8
 8002820:	08004eb8 	.word	0x08004eb8
 8002824:	003d0900 	.word	0x003d0900

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b02      	ldr	r3, [pc, #8]	; (8002838 <HAL_RCC_GetHCLKFreq+0x10>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	20000008 	.word	0x20000008

0800283c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002840:	f7ff fff2 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	08004ea0 	.word	0x08004ea0

08002864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002868:	f7ff ffde 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0adb      	lsrs	r3, r3, #11
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4903      	ldr	r1, [pc, #12]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	08004ea0 	.word	0x08004ea0

0800288c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <RCC_Delay+0x34>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <RCC_Delay+0x38>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0a5b      	lsrs	r3, r3, #9
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028a8:	bf00      	nop
  }
  while (Delay --);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1e5a      	subs	r2, r3, #1
 80028ae:	60fa      	str	r2, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f9      	bne.n	80028a8 <RCC_Delay+0x1c>
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	20000008 	.word	0x20000008
 80028c4:	10624dd3 	.word	0x10624dd3

080028c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e041      	b.n	800295e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe f96c 	bl	8000bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f000 fab2 	bl	8002e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e041      	b.n	80029fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f839 	bl	8002a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3304      	adds	r3, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f000 fa63 	bl	8002e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <HAL_TIM_PWM_Start+0x24>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e022      	b.n	8002a82 <HAL_TIM_PWM_Start+0x6a>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d109      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x3e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	e015      	b.n	8002a82 <HAL_TIM_PWM_Start+0x6a>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d109      	bne.n	8002a70 <HAL_TIM_PWM_Start+0x58>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e008      	b.n	8002a82 <HAL_TIM_PWM_Start+0x6a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e05e      	b.n	8002b48 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d104      	bne.n	8002a9a <HAL_TIM_PWM_Start+0x82>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a98:	e013      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xaa>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d104      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x92>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa8:	e00b      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xaa>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_PWM_Start+0xa2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab8:	e003      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xaa>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fc50 	bl	8003370 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_TIM_PWM_Start+0x138>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d107      	bne.n	8002aea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <HAL_TIM_PWM_Start+0x138>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00e      	beq.n	8002b12 <HAL_TIM_PWM_Start+0xfa>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d009      	beq.n	8002b12 <HAL_TIM_PWM_Start+0xfa>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <HAL_TIM_PWM_Start+0x13c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d004      	beq.n	8002b12 <HAL_TIM_PWM_Start+0xfa>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <HAL_TIM_PWM_Start+0x140>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d111      	bne.n	8002b36 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b06      	cmp	r3, #6
 8002b22:	d010      	beq.n	8002b46 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b34:	e007      	b.n	8002b46 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800

08002b5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e0ae      	b.n	8002cd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	f200 809f 	bhi.w	8002cc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b8a:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b90:	08002bc5 	.word	0x08002bc5
 8002b94:	08002cc9 	.word	0x08002cc9
 8002b98:	08002cc9 	.word	0x08002cc9
 8002b9c:	08002cc9 	.word	0x08002cc9
 8002ba0:	08002c05 	.word	0x08002c05
 8002ba4:	08002cc9 	.word	0x08002cc9
 8002ba8:	08002cc9 	.word	0x08002cc9
 8002bac:	08002cc9 	.word	0x08002cc9
 8002bb0:	08002c47 	.word	0x08002c47
 8002bb4:	08002cc9 	.word	0x08002cc9
 8002bb8:	08002cc9 	.word	0x08002cc9
 8002bbc:	08002cc9 	.word	0x08002cc9
 8002bc0:	08002c87 	.word	0x08002c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f9b2 	bl	8002f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0208 	orr.w	r2, r2, #8
 8002bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0204 	bic.w	r2, r2, #4
 8002bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6999      	ldr	r1, [r3, #24]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	619a      	str	r2, [r3, #24]
      break;
 8002c02:	e064      	b.n	8002cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f9f8 	bl	8003000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6999      	ldr	r1, [r3, #24]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	021a      	lsls	r2, r3, #8
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	619a      	str	r2, [r3, #24]
      break;
 8002c44:	e043      	b.n	8002cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fa41 	bl	80030d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0208 	orr.w	r2, r2, #8
 8002c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0204 	bic.w	r2, r2, #4
 8002c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69d9      	ldr	r1, [r3, #28]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	61da      	str	r2, [r3, #28]
      break;
 8002c84:	e023      	b.n	8002cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fa8b 	bl	80031a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69d9      	ldr	r1, [r3, #28]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	021a      	lsls	r2, r3, #8
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	61da      	str	r2, [r3, #28]
      break;
 8002cc6:	e002      	b.n	8002cce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	75fb      	strb	r3, [r7, #23]
      break;
 8002ccc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_TIM_ConfigClockSource+0x1c>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0b4      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x186>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d34:	d03e      	beq.n	8002db4 <HAL_TIM_ConfigClockSource+0xd4>
 8002d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3a:	f200 8087 	bhi.w	8002e4c <HAL_TIM_ConfigClockSource+0x16c>
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	f000 8086 	beq.w	8002e52 <HAL_TIM_ConfigClockSource+0x172>
 8002d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4a:	d87f      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x16c>
 8002d4c:	2b70      	cmp	r3, #112	; 0x70
 8002d4e:	d01a      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0xa6>
 8002d50:	2b70      	cmp	r3, #112	; 0x70
 8002d52:	d87b      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x16c>
 8002d54:	2b60      	cmp	r3, #96	; 0x60
 8002d56:	d050      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x11a>
 8002d58:	2b60      	cmp	r3, #96	; 0x60
 8002d5a:	d877      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x16c>
 8002d5c:	2b50      	cmp	r3, #80	; 0x50
 8002d5e:	d03c      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0xfa>
 8002d60:	2b50      	cmp	r3, #80	; 0x50
 8002d62:	d873      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b40      	cmp	r3, #64	; 0x40
 8002d66:	d058      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x13a>
 8002d68:	2b40      	cmp	r3, #64	; 0x40
 8002d6a:	d86f      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b30      	cmp	r3, #48	; 0x30
 8002d6e:	d064      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x15a>
 8002d70:	2b30      	cmp	r3, #48	; 0x30
 8002d72:	d86b      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x16c>
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d060      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x15a>
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d867      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d05c      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x15a>
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d05a      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x15a>
 8002d84:	e062      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d96:	f000 facc 	bl	8003332 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002da8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	609a      	str	r2, [r3, #8]
      break;
 8002db2:	e04f      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dc4:	f000 fab5 	bl	8003332 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dd6:	609a      	str	r2, [r3, #8]
      break;
 8002dd8:	e03c      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	461a      	mov	r2, r3
 8002de8:	f000 fa2c 	bl	8003244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2150      	movs	r1, #80	; 0x50
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fa83 	bl	80032fe <TIM_ITRx_SetConfig>
      break;
 8002df8:	e02c      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e06:	461a      	mov	r2, r3
 8002e08:	f000 fa4a 	bl	80032a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2160      	movs	r1, #96	; 0x60
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fa73 	bl	80032fe <TIM_ITRx_SetConfig>
      break;
 8002e18:	e01c      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e26:	461a      	mov	r2, r3
 8002e28:	f000 fa0c 	bl	8003244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2140      	movs	r1, #64	; 0x40
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fa63 	bl	80032fe <TIM_ITRx_SetConfig>
      break;
 8002e38:	e00c      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f000 fa5a 	bl	80032fe <TIM_ITRx_SetConfig>
      break;
 8002e4a:	e003      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e50:	e000      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a29      	ldr	r2, [pc, #164]	; (8002f28 <TIM_Base_SetConfig+0xb8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00b      	beq.n	8002ea0 <TIM_Base_SetConfig+0x30>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8e:	d007      	beq.n	8002ea0 <TIM_Base_SetConfig+0x30>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a26      	ldr	r2, [pc, #152]	; (8002f2c <TIM_Base_SetConfig+0xbc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_Base_SetConfig+0x30>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <TIM_Base_SetConfig+0xc0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d108      	bne.n	8002eb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <TIM_Base_SetConfig+0xb8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <TIM_Base_SetConfig+0x62>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d007      	beq.n	8002ed2 <TIM_Base_SetConfig+0x62>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <TIM_Base_SetConfig+0xbc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d003      	beq.n	8002ed2 <TIM_Base_SetConfig+0x62>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <TIM_Base_SetConfig+0xc0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d108      	bne.n	8002ee4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <TIM_Base_SetConfig+0xb8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d103      	bne.n	8002f18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	615a      	str	r2, [r3, #20]
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800

08002f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f023 0201 	bic.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0303 	bic.w	r3, r3, #3
 8002f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f023 0302 	bic.w	r3, r3, #2
 8002f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <TIM_OC1_SetConfig+0xc8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d10c      	bne.n	8002faa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f023 0308 	bic.w	r3, r3, #8
 8002f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f023 0304 	bic.w	r3, r3, #4
 8002fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <TIM_OC1_SetConfig+0xc8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d111      	bne.n	8002fd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	621a      	str	r2, [r3, #32]
}
 8002ff0:	bf00      	nop
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40012c00 	.word	0x40012c00

08003000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f023 0210 	bic.w	r2, r3, #16
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f023 0320 	bic.w	r3, r3, #32
 800304a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <TIM_OC2_SetConfig+0xd0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d10d      	bne.n	800307c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800307a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <TIM_OC2_SetConfig+0xd0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d113      	bne.n	80030ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800308a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	40012c00 	.word	0x40012c00

080030d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800311c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <TIM_OC3_SetConfig+0xd0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10d      	bne.n	800314e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800314c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <TIM_OC3_SetConfig+0xd0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d113      	bne.n	800317e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800315c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	621a      	str	r2, [r3, #32]
}
 8003198:	bf00      	nop
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40012c00 	.word	0x40012c00

080031a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	031b      	lsls	r3, r3, #12
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a0f      	ldr	r2, [pc, #60]	; (8003240 <TIM_OC4_SetConfig+0x98>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d109      	bne.n	800321c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800320e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	019b      	lsls	r3, r3, #6
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	621a      	str	r2, [r3, #32]
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	40012c00 	.word	0x40012c00

08003244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f023 0201 	bic.w	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800326e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f023 030a 	bic.w	r3, r3, #10
 8003280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	621a      	str	r2, [r3, #32]
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f023 0210 	bic.w	r2, r3, #16
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	031b      	lsls	r3, r3, #12
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	621a      	str	r2, [r3, #32]
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	f043 0307 	orr.w	r3, r3, #7
 8003320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	609a      	str	r2, [r3, #8]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003332:	b480      	push	{r7}
 8003334:	b087      	sub	sp, #28
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800334c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	021a      	lsls	r2, r3, #8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	431a      	orrs	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4313      	orrs	r3, r2
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	609a      	str	r2, [r3, #8]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	2201      	movs	r2, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a1a      	ldr	r2, [r3, #32]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	43db      	mvns	r3, r3
 8003392:	401a      	ands	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a1a      	ldr	r2, [r3, #32]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	621a      	str	r2, [r3, #32]
}
 80033ae:	bf00      	nop
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e046      	b.n	800345e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341c:	d009      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a12      	ldr	r2, [pc, #72]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a10      	ldr	r2, [pc, #64]	; (8003470 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d10c      	bne.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	4313      	orrs	r3, r2
 8003442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800

08003474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e042      	b.n	800350c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fbe2 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2224      	movs	r2, #36	; 0x24
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fcd5 	bl	8003e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	4613      	mov	r3, r2
 8003520:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b20      	cmp	r3, #32
 800352c:	d112      	bne.n	8003554 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_UART_Receive_IT+0x26>
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e00b      	b.n	8003556 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	461a      	mov	r2, r3
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fab7 	bl	8003abe <UART_Start_Receive_IT>
 8003550:	4603      	mov	r3, r0
 8003552:	e000      	b.n	8003556 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b0ba      	sub	sp, #232	; 0xe8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800358c:	2300      	movs	r3, #0
 800358e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800359e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10f      	bne.n	80035c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_UART_IRQHandler+0x66>
 80035b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fb93 	bl	8003cea <UART_Receive_IT>
      return;
 80035c4:	e25b      	b.n	8003a7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80de 	beq.w	800378c <HAL_UART_IRQHandler+0x22c>
 80035d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80d1 	beq.w	800378c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_UART_IRQHandler+0xae>
 80035f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f043 0201 	orr.w	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800360e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_UART_IRQHandler+0xd2>
 800361a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f043 0202 	orr.w	r2, r3, #2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_UART_IRQHandler+0xf6>
 800363e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	f043 0204 	orr.w	r2, r3, #4
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d011      	beq.n	8003686 <HAL_UART_IRQHandler+0x126>
 8003662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800366e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f043 0208 	orr.w	r2, r3, #8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 81f2 	beq.w	8003a74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_UART_IRQHandler+0x14e>
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fb1e 	bl	8003cea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf14      	ite	ne
 80036bc:	2301      	movne	r3, #1
 80036be:	2300      	moveq	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d103      	bne.n	80036da <HAL_UART_IRQHandler+0x17a>
 80036d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d04f      	beq.n	800377a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa28 	bl	8003b30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d041      	beq.n	8003772 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3314      	adds	r3, #20
 80036f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800370c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3314      	adds	r3, #20
 8003716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800371a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800371e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1d9      	bne.n	80036ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d013      	beq.n	800376a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	4a7e      	ldr	r2, [pc, #504]	; (8003940 <HAL_UART_IRQHandler+0x3e0>)
 8003748:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd fce4 	bl	800111c <HAL_DMA_Abort_IT>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003764:	4610      	mov	r0, r2
 8003766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	e00e      	b.n	8003788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f993 	bl	8003a96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	e00a      	b.n	8003788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f98f 	bl	8003a96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	e006      	b.n	8003788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f98b 	bl	8003a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003786:	e175      	b.n	8003a74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	bf00      	nop
    return;
 800378a:	e173      	b.n	8003a74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	2b01      	cmp	r3, #1
 8003792:	f040 814f 	bne.w	8003a34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 8148 	beq.w	8003a34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8141 	beq.w	8003a34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80b6 	beq.w	8003944 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8145 	beq.w	8003a78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037f6:	429a      	cmp	r2, r3
 80037f8:	f080 813e 	bcs.w	8003a78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003802:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b20      	cmp	r3, #32
 800380c:	f000 8088 	beq.w	8003920 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800382a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800382e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
 8003838:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800383c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003840:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003848:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1d9      	bne.n	8003810 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3314      	adds	r3, #20
 8003862:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800386c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3314      	adds	r3, #20
 800387c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003880:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003884:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003888:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003892:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e1      	bne.n	800385c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3314      	adds	r3, #20
 800389e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3314      	adds	r3, #20
 80038b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e3      	bne.n	8003898 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f0:	f023 0310 	bic.w	r3, r3, #16
 80038f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003902:	65ba      	str	r2, [r7, #88]	; 0x58
 8003904:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e3      	bne.n	80038de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd fbc3 	bl	80010a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800392e:	b29b      	uxth	r3, r3
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	b29b      	uxth	r3, r3
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8b6 	bl	8003aa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800393c:	e09c      	b.n	8003a78 <HAL_UART_IRQHandler+0x518>
 800393e:	bf00      	nop
 8003940:	08003bf5 	.word	0x08003bf5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800394c:	b29b      	uxth	r3, r3
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 808e 	beq.w	8003a7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8089 	beq.w	8003a7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800397a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003980:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800398e:	647a      	str	r2, [r7, #68]	; 0x44
 8003990:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800399c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e3      	bne.n	800396a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3314      	adds	r3, #20
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	623b      	str	r3, [r7, #32]
   return(result);
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039c6:	633a      	str	r2, [r7, #48]	; 0x30
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e3      	bne.n	80039a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	330c      	adds	r3, #12
 80039ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0310 	bic.w	r3, r3, #16
 80039fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a0c:	61fa      	str	r2, [r7, #28]
 8003a0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	69b9      	ldr	r1, [r7, #24]
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	617b      	str	r3, [r7, #20]
   return(result);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e3      	bne.n	80039e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f83b 	bl	8003aa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a32:	e023      	b.n	8003a7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d009      	beq.n	8003a54 <HAL_UART_IRQHandler+0x4f4>
 8003a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f8e5 	bl	8003c1c <UART_Transmit_IT>
    return;
 8003a52:	e014      	b.n	8003a7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00e      	beq.n	8003a7e <HAL_UART_IRQHandler+0x51e>
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f924 	bl	8003cba <UART_EndTransmit_IT>
    return;
 8003a72:	e004      	b.n	8003a7e <HAL_UART_IRQHandler+0x51e>
    return;
 8003a74:	bf00      	nop
 8003a76:	e002      	b.n	8003a7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a7c:	bf00      	nop
  }
}
 8003a7e:	37e8      	adds	r7, #232	; 0xe8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	88fa      	ldrh	r2, [r7, #6]
 8003adc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2222      	movs	r2, #34	; 0x22
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b02:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0220 	orr.w	r2, r2, #32
 8003b22:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b095      	sub	sp, #84	; 0x54
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b58:	643a      	str	r2, [r7, #64]	; 0x40
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e5      	bne.n	8003b38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3314      	adds	r3, #20
 8003b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e5      	bne.n	8003b6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d119      	bne.n	8003bdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f023 0310 	bic.w	r3, r3, #16
 8003bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bc8:	61ba      	str	r2, [r7, #24]
 8003bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6979      	ldr	r1, [r7, #20]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bea:	bf00      	nop
 8003bec:	3754      	adds	r7, #84	; 0x54
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f7ff ff41 	bl	8003a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b21      	cmp	r3, #33	; 0x21
 8003c2e:	d13e      	bne.n	8003cae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c38:	d114      	bne.n	8003c64 <UART_Transmit_IT+0x48>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d110      	bne.n	8003c64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]
 8003c62:	e008      	b.n	8003c76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	1c59      	adds	r1, r3, #1
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6211      	str	r1, [r2, #32]
 8003c6e:	781a      	ldrb	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4619      	mov	r1, r3
 8003c84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10f      	bne.n	8003caa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fed2 	bl	8003a84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b08c      	sub	sp, #48	; 0x30
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b22      	cmp	r3, #34	; 0x22
 8003cfc:	f040 80ae 	bne.w	8003e5c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	d117      	bne.n	8003d3a <UART_Receive_IT+0x50>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d113      	bne.n	8003d3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	1c9a      	adds	r2, r3, #2
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
 8003d38:	e026      	b.n	8003d88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d007      	beq.n	8003d5e <UART_Receive_IT+0x74>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <UART_Receive_IT+0x82>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e008      	b.n	8003d7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4619      	mov	r1, r3
 8003d96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d15d      	bne.n	8003e58 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0220 	bic.w	r2, r2, #32
 8003daa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d135      	bne.n	8003e4e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	613b      	str	r3, [r7, #16]
   return(result);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f023 0310 	bic.w	r3, r3, #16
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e08:	623a      	str	r2, [r7, #32]
 8003e0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	69f9      	ldr	r1, [r7, #28]
 8003e0e:	6a3a      	ldr	r2, [r7, #32]
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d10a      	bne.n	8003e40 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fe2e 	bl	8003aa8 <HAL_UARTEx_RxEventCallback>
 8003e4c:	e002      	b.n	8003e54 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fc fb62 	bl	8000518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e002      	b.n	8003e5e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3730      	adds	r7, #48	; 0x30
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ea2:	f023 030c 	bic.w	r3, r3, #12
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a2c      	ldr	r2, [pc, #176]	; (8003f7c <UART_SetConfig+0x114>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d103      	bne.n	8003ed8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ed0:	f7fe fcc8 	bl	8002864 <HAL_RCC_GetPCLK2Freq>
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	e002      	b.n	8003ede <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f7fe fcb0 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 8003edc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef4:	4a22      	ldr	r2, [pc, #136]	; (8003f80 <UART_SetConfig+0x118>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	0119      	lsls	r1, r3, #4
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	009a      	lsls	r2, r3, #2
 8003f08:	441a      	add	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <UART_SetConfig+0x118>)
 8003f16:	fba3 0302 	umull	r0, r3, r3, r2
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2064      	movs	r0, #100	; 0x64
 8003f1e:	fb00 f303 	mul.w	r3, r0, r3
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	3332      	adds	r3, #50	; 0x32
 8003f28:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <UART_SetConfig+0x118>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f34:	4419      	add	r1, r3
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009a      	lsls	r2, r3, #2
 8003f40:	441a      	add	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <UART_SetConfig+0x118>)
 8003f4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	2064      	movs	r0, #100	; 0x64
 8003f56:	fb00 f303 	mul.w	r3, r0, r3
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	3332      	adds	r3, #50	; 0x32
 8003f60:	4a07      	ldr	r2, [pc, #28]	; (8003f80 <UART_SetConfig+0x118>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	440a      	add	r2, r1
 8003f72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	51eb851f 	.word	0x51eb851f

08003f84 <atoi>:
 8003f84:	220a      	movs	r2, #10
 8003f86:	2100      	movs	r1, #0
 8003f88:	f000 b87e 	b.w	8004088 <strtol>

08003f8c <_strtol_l.constprop.0>:
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f92:	4686      	mov	lr, r0
 8003f94:	4690      	mov	r8, r2
 8003f96:	d001      	beq.n	8003f9c <_strtol_l.constprop.0+0x10>
 8003f98:	2b24      	cmp	r3, #36	; 0x24
 8003f9a:	d906      	bls.n	8003faa <_strtol_l.constprop.0+0x1e>
 8003f9c:	f000 f886 	bl	80040ac <__errno>
 8003fa0:	2316      	movs	r3, #22
 8003fa2:	6003      	str	r3, [r0, #0]
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003faa:	460d      	mov	r5, r1
 8003fac:	4835      	ldr	r0, [pc, #212]	; (8004084 <_strtol_l.constprop.0+0xf8>)
 8003fae:	462a      	mov	r2, r5
 8003fb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fb4:	5d06      	ldrb	r6, [r0, r4]
 8003fb6:	f016 0608 	ands.w	r6, r6, #8
 8003fba:	d1f8      	bne.n	8003fae <_strtol_l.constprop.0+0x22>
 8003fbc:	2c2d      	cmp	r4, #45	; 0x2d
 8003fbe:	d12e      	bne.n	800401e <_strtol_l.constprop.0+0x92>
 8003fc0:	2601      	movs	r6, #1
 8003fc2:	782c      	ldrb	r4, [r5, #0]
 8003fc4:	1c95      	adds	r5, r2, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d057      	beq.n	800407a <_strtol_l.constprop.0+0xee>
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d109      	bne.n	8003fe2 <_strtol_l.constprop.0+0x56>
 8003fce:	2c30      	cmp	r4, #48	; 0x30
 8003fd0:	d107      	bne.n	8003fe2 <_strtol_l.constprop.0+0x56>
 8003fd2:	782a      	ldrb	r2, [r5, #0]
 8003fd4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003fd8:	2a58      	cmp	r2, #88	; 0x58
 8003fda:	d149      	bne.n	8004070 <_strtol_l.constprop.0+0xe4>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	786c      	ldrb	r4, [r5, #1]
 8003fe0:	3502      	adds	r5, #2
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8003fe8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003fec:	fbbc f9f3 	udiv	r9, ip, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	fb03 ca19 	mls	sl, r3, r9, ip
 8003ff6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003ffa:	2f09      	cmp	r7, #9
 8003ffc:	d814      	bhi.n	8004028 <_strtol_l.constprop.0+0x9c>
 8003ffe:	463c      	mov	r4, r7
 8004000:	42a3      	cmp	r3, r4
 8004002:	dd20      	ble.n	8004046 <_strtol_l.constprop.0+0xba>
 8004004:	1c57      	adds	r7, r2, #1
 8004006:	d007      	beq.n	8004018 <_strtol_l.constprop.0+0x8c>
 8004008:	4581      	cmp	r9, r0
 800400a:	d319      	bcc.n	8004040 <_strtol_l.constprop.0+0xb4>
 800400c:	d101      	bne.n	8004012 <_strtol_l.constprop.0+0x86>
 800400e:	45a2      	cmp	sl, r4
 8004010:	db16      	blt.n	8004040 <_strtol_l.constprop.0+0xb4>
 8004012:	2201      	movs	r2, #1
 8004014:	fb00 4003 	mla	r0, r0, r3, r4
 8004018:	f815 4b01 	ldrb.w	r4, [r5], #1
 800401c:	e7eb      	b.n	8003ff6 <_strtol_l.constprop.0+0x6a>
 800401e:	2c2b      	cmp	r4, #43	; 0x2b
 8004020:	bf04      	itt	eq
 8004022:	782c      	ldrbeq	r4, [r5, #0]
 8004024:	1c95      	addeq	r5, r2, #2
 8004026:	e7ce      	b.n	8003fc6 <_strtol_l.constprop.0+0x3a>
 8004028:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800402c:	2f19      	cmp	r7, #25
 800402e:	d801      	bhi.n	8004034 <_strtol_l.constprop.0+0xa8>
 8004030:	3c37      	subs	r4, #55	; 0x37
 8004032:	e7e5      	b.n	8004000 <_strtol_l.constprop.0+0x74>
 8004034:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004038:	2f19      	cmp	r7, #25
 800403a:	d804      	bhi.n	8004046 <_strtol_l.constprop.0+0xba>
 800403c:	3c57      	subs	r4, #87	; 0x57
 800403e:	e7df      	b.n	8004000 <_strtol_l.constprop.0+0x74>
 8004040:	f04f 32ff 	mov.w	r2, #4294967295
 8004044:	e7e8      	b.n	8004018 <_strtol_l.constprop.0+0x8c>
 8004046:	1c53      	adds	r3, r2, #1
 8004048:	d108      	bne.n	800405c <_strtol_l.constprop.0+0xd0>
 800404a:	2322      	movs	r3, #34	; 0x22
 800404c:	4660      	mov	r0, ip
 800404e:	f8ce 3000 	str.w	r3, [lr]
 8004052:	f1b8 0f00 	cmp.w	r8, #0
 8004056:	d0a6      	beq.n	8003fa6 <_strtol_l.constprop.0+0x1a>
 8004058:	1e69      	subs	r1, r5, #1
 800405a:	e006      	b.n	800406a <_strtol_l.constprop.0+0xde>
 800405c:	b106      	cbz	r6, 8004060 <_strtol_l.constprop.0+0xd4>
 800405e:	4240      	negs	r0, r0
 8004060:	f1b8 0f00 	cmp.w	r8, #0
 8004064:	d09f      	beq.n	8003fa6 <_strtol_l.constprop.0+0x1a>
 8004066:	2a00      	cmp	r2, #0
 8004068:	d1f6      	bne.n	8004058 <_strtol_l.constprop.0+0xcc>
 800406a:	f8c8 1000 	str.w	r1, [r8]
 800406e:	e79a      	b.n	8003fa6 <_strtol_l.constprop.0+0x1a>
 8004070:	2430      	movs	r4, #48	; 0x30
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1b5      	bne.n	8003fe2 <_strtol_l.constprop.0+0x56>
 8004076:	2308      	movs	r3, #8
 8004078:	e7b3      	b.n	8003fe2 <_strtol_l.constprop.0+0x56>
 800407a:	2c30      	cmp	r4, #48	; 0x30
 800407c:	d0a9      	beq.n	8003fd2 <_strtol_l.constprop.0+0x46>
 800407e:	230a      	movs	r3, #10
 8004080:	e7af      	b.n	8003fe2 <_strtol_l.constprop.0+0x56>
 8004082:	bf00      	nop
 8004084:	08004ebb 	.word	0x08004ebb

08004088 <strtol>:
 8004088:	4613      	mov	r3, r2
 800408a:	460a      	mov	r2, r1
 800408c:	4601      	mov	r1, r0
 800408e:	4802      	ldr	r0, [pc, #8]	; (8004098 <strtol+0x10>)
 8004090:	6800      	ldr	r0, [r0, #0]
 8004092:	f7ff bf7b 	b.w	8003f8c <_strtol_l.constprop.0>
 8004096:	bf00      	nop
 8004098:	20000060 	.word	0x20000060

0800409c <memset>:
 800409c:	4603      	mov	r3, r0
 800409e:	4402      	add	r2, r0
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d100      	bne.n	80040a6 <memset+0xa>
 80040a4:	4770      	bx	lr
 80040a6:	f803 1b01 	strb.w	r1, [r3], #1
 80040aa:	e7f9      	b.n	80040a0 <memset+0x4>

080040ac <__errno>:
 80040ac:	4b01      	ldr	r3, [pc, #4]	; (80040b4 <__errno+0x8>)
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000060 	.word	0x20000060

080040b8 <__libc_init_array>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	2600      	movs	r6, #0
 80040bc:	4d0c      	ldr	r5, [pc, #48]	; (80040f0 <__libc_init_array+0x38>)
 80040be:	4c0d      	ldr	r4, [pc, #52]	; (80040f4 <__libc_init_array+0x3c>)
 80040c0:	1b64      	subs	r4, r4, r5
 80040c2:	10a4      	asrs	r4, r4, #2
 80040c4:	42a6      	cmp	r6, r4
 80040c6:	d109      	bne.n	80040dc <__libc_init_array+0x24>
 80040c8:	f000 f828 	bl	800411c <_init>
 80040cc:	2600      	movs	r6, #0
 80040ce:	4d0a      	ldr	r5, [pc, #40]	; (80040f8 <__libc_init_array+0x40>)
 80040d0:	4c0a      	ldr	r4, [pc, #40]	; (80040fc <__libc_init_array+0x44>)
 80040d2:	1b64      	subs	r4, r4, r5
 80040d4:	10a4      	asrs	r4, r4, #2
 80040d6:	42a6      	cmp	r6, r4
 80040d8:	d105      	bne.n	80040e6 <__libc_init_array+0x2e>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e0:	4798      	blx	r3
 80040e2:	3601      	adds	r6, #1
 80040e4:	e7ee      	b.n	80040c4 <__libc_init_array+0xc>
 80040e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ea:	4798      	blx	r3
 80040ec:	3601      	adds	r6, #1
 80040ee:	e7f2      	b.n	80040d6 <__libc_init_array+0x1e>
 80040f0:	08004fbc 	.word	0x08004fbc
 80040f4:	08004fbc 	.word	0x08004fbc
 80040f8:	08004fbc 	.word	0x08004fbc
 80040fc:	08004fc0 	.word	0x08004fc0

08004100 <memcpy>:
 8004100:	440a      	add	r2, r1
 8004102:	4291      	cmp	r1, r2
 8004104:	f100 33ff 	add.w	r3, r0, #4294967295
 8004108:	d100      	bne.n	800410c <memcpy+0xc>
 800410a:	4770      	bx	lr
 800410c:	b510      	push	{r4, lr}
 800410e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004112:	4291      	cmp	r1, r2
 8004114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004118:	d1f9      	bne.n	800410e <memcpy+0xe>
 800411a:	bd10      	pop	{r4, pc}

0800411c <_init>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr

08004128 <_fini>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	bf00      	nop
 800412c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412e:	bc08      	pop	{r3}
 8004130:	469e      	mov	lr, r3
 8004132:	4770      	bx	lr
